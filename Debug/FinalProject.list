
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d4  080054d4  00021148  2**0
                  CONTENTS
  4 .ARM          00000008  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054dc  080054dc  00021148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001148  20000000  080054e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20001148  0800662c  00021148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  0800662c  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeb0  00000000  00000000  00021178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001857  00000000  00000000  0002c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  0002e400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001651d  00000000  00000000  0002eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008014  00000000  00000000  000453d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d347  00000000  00000000  0004d3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  000da7ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001148 	.word	0x20001148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800497c 	.word	0x0800497c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000114c 	.word	0x2000114c
 80001dc:	0800497c 	.word	0x0800497c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <resetValues>:
int state = 0; //state of the program
int mode = 0; //mode of the game (easy,medium,hard)
int Timeout = 1000000;
int size = 0; //size of the random word
int try = 8; //max trial
void resetValues(){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	for (int i = 0;i < 25; ++i){
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	e007      	b.n	800059c <resetValues+0x1c>
		word[i] = ' ';
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <resetValues+0x64>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	2220      	movs	r2, #32
 8000594:	701a      	strb	r2, [r3, #0]
	for (int i = 0;i < 25; ++i){
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b18      	cmp	r3, #24
 80005a0:	ddf4      	ble.n	800058c <resetValues+0xc>
	}
	for (int i = 0; i < 26; ++i){
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	e007      	b.n	80005b8 <resetValues+0x38>
		usedCharacter[i] = ' ';
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <resetValues+0x68>)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	2220      	movs	r2, #32
 80005b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; ++i){
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2b19      	cmp	r3, #25
 80005bc:	ddf4      	ble.n	80005a8 <resetValues+0x28>
	}
	mode = 0;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <resetValues+0x6c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	size = 0;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <resetValues+0x70>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	try = 8;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <resetValues+0x74>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	601a      	str	r2, [r3, #0]
	start = 0;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <resetValues+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20001220 	.word	0x20001220
 80005e8:	20000f48 	.word	0x20000f48
 80005ec:	2000116c 	.word	0x2000116c
 80005f0:	20001170 	.word	0x20001170
 80005f4:	20000f68 	.word	0x20000f68
 80005f8:	20001164 	.word	0x20001164

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f001 fb28 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f886 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f98a 	bl	8000920 <MX_GPIO_Init>
  MX_TIM2_Init();
 800060c:	f000 f8ec 	bl	80007e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f95c 	bl	80008cc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4839      	ldr	r0, [pc, #228]	; (80006fc <main+0x100>)
 8000618:	f002 fb0c 	bl	8002c34 <HAL_TIM_PWM_Start>
	if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	4837      	ldr	r0, [pc, #220]	; (8000700 <main+0x104>)
 8000622:	f001 fe13 	bl	800224c <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10a      	bne.n	8000642 <main+0x46>
		while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800062c:	bf00      	nop
 800062e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000632:	4833      	ldr	r0, [pc, #204]	; (8000700 <main+0x104>)
 8000634:	f001 fe0a 	bl	800224c <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f7      	beq.n	800062e <main+0x32>
		buttonPushStart();
 800063e:	f000 fad9 	bl	8000bf4 <buttonPushStart>
	}
	if (state == 1){
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <main+0x108>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d119      	bne.n	800067e <main+0x82>
		if (HAL_UART_Receive(&huart2, pData, 1, Timeout) == HAL_OK){
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <main+0x10c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2201      	movs	r2, #1
 8000650:	492e      	ldr	r1, [pc, #184]	; (800070c <main+0x110>)
 8000652:	482f      	ldr	r0, [pc, #188]	; (8000710 <main+0x114>)
 8000654:	f003 f8be 	bl	80037d4 <HAL_UART_Receive>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10f      	bne.n	800067e <main+0x82>
			if (pData[0] == '1'){
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <main+0x110>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b31      	cmp	r3, #49	; 0x31
 8000664:	d102      	bne.n	800066c <main+0x70>
				startGame();
 8000666:	f000 fa31 	bl	8000acc <startGame>
 800066a:	e008      	b.n	800067e <main+0x82>
			}
			else if (pData[0] == '2'){
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <main+0x110>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b32      	cmp	r3, #50	; 0x32
 8000672:	d102      	bne.n	800067a <main+0x7e>
				howToPlay();
 8000674:	f000 fa4a 	bl	8000b0c <howToPlay>
 8000678:	e001      	b.n	800067e <main+0x82>
			}
			else{
				error1();
 800067a:	f000 fa7f 	bl	8000b7c <error1>
			}
		}
	}
	if (state == 2){
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <main+0x108>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d120      	bne.n	80006c8 <main+0xcc>
		if (HAL_UART_Receive(&huart2, pData, 1, Timeout) == HAL_OK){
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <main+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2201      	movs	r2, #1
 800068c:	491f      	ldr	r1, [pc, #124]	; (800070c <main+0x110>)
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <main+0x114>)
 8000690:	f003 f8a0 	bl	80037d4 <HAL_UART_Receive>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d116      	bne.n	80006c8 <main+0xcc>
			if (pData[0] == '1'){
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <main+0x110>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b31      	cmp	r3, #49	; 0x31
 80006a0:	d102      	bne.n	80006a8 <main+0xac>
				startEasy();
 80006a2:	f000 fac7 	bl	8000c34 <startEasy>
 80006a6:	e00f      	b.n	80006c8 <main+0xcc>
			}
			else if (pData[0] == '2'){
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <main+0x110>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b32      	cmp	r3, #50	; 0x32
 80006ae:	d102      	bne.n	80006b6 <main+0xba>
				startMedium();
 80006b0:	f000 faea 	bl	8000c88 <startMedium>
 80006b4:	e008      	b.n	80006c8 <main+0xcc>
			}
			else if (pData[0] == '3'){
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <main+0x110>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b33      	cmp	r3, #51	; 0x33
 80006bc:	d102      	bne.n	80006c4 <main+0xc8>
				startHard();
 80006be:	f000 fb0d 	bl	8000cdc <startHard>
 80006c2:	e001      	b.n	80006c8 <main+0xcc>
			}
			else{
				error2();
 80006c4:	f000 fb34 	bl	8000d30 <error2>
			}
		}
	}
	if (state == 3){
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <main+0x108>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d101      	bne.n	80006d4 <main+0xd8>
		startNow();
 80006d0:	f000 fb6e 	bl	8000db0 <startNow>
	}
	if (state == 4){
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <main+0x108>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d101      	bne.n	80006e0 <main+0xe4>
		firstTurn();
 80006dc:	f000 fbb2 	bl	8000e44 <firstTurn>
	}
	if (state == 5){
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <main+0x108>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	d101      	bne.n	80006ec <main+0xf0>
		continueTurn();
 80006e8:	f000 fe22 	bl	8001330 <continueTurn>
	}
    /* USER CODE END WHILE */
	if (state == 6){
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <main+0x108>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b06      	cmp	r3, #6
 80006f2:	d18f      	bne.n	8000614 <main+0x18>
		tryAgain();
 80006f4:	f001 f924 	bl	8001940 <tryAgain>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006f8:	e78c      	b.n	8000614 <main+0x18>
 80006fa:	bf00      	nop
 80006fc:	200011a0 	.word	0x200011a0
 8000700:	40020800 	.word	0x40020800
 8000704:	20001168 	.word	0x20001168
 8000708:	20000f64 	.word	0x20000f64
 800070c:	20001180 	.word	0x20001180
 8000710:	200011e0 	.word	0x200011e0

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fd17 	bl	8004156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000784:	2310      	movs	r3, #16
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078e:	2304      	movs	r3, #4
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fd88 	bl	80022b0 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a6:	f001 f923 	bl	80019f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 ffe2 	bl	8002790 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f001 f90d 	bl	80019f0 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_TIM2_Init+0xe0>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_TIM2_Init+0xe0>)
 8000822:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000826:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_TIM2_Init+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_TIM2_Init+0xe0>)
 8000830:	2232      	movs	r2, #50	; 0x32
 8000832:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_TIM2_Init+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_TIM2_Init+0xe0>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000840:	4821      	ldr	r0, [pc, #132]	; (80008c8 <MX_TIM2_Init+0xe0>)
 8000842:	f002 f997 	bl	8002b74 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800084c:	f001 f8d0 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_TIM2_Init+0xe0>)
 800085e:	f002 fae1 	bl	8002e24 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000868:	f001 f8c2 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800086c:	4816      	ldr	r0, [pc, #88]	; (80008c8 <MX_TIM2_Init+0xe0>)
 800086e:	f002 f9ac 	bl	8002bca <HAL_TIM_PWM_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000878:	f001 f8ba 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <MX_TIM2_Init+0xe0>)
 800088c:	f002 fe4e 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000896:	f001 f8ab 	bl	80019f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_TIM2_Init+0xe0>)
 80008b2:	f002 f9f1 	bl	8002c98 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008bc:	f001 f898 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200011a0 	.word	0x200011a0

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 8000904:	f002 fe80 	bl	8003608 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f001 f86f 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200011e0 	.word	0x200011e0
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0xd4>)
 80009ac:	f001 fc66 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_GPIO_Init+0xd8>)
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_GPIO_Init+0xdc>)
 80009c6:	f001 fabf 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xd4>)
 80009e2:	f001 fab1 	bl	8001f48 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	10210000 	.word	0x10210000
 80009fc:	40020800 	.word	0x40020800

08000a00 <setVocabularySets>:

/* USER CODE BEGIN 4 */
void setVocabularySets(char set[50][25]){
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	state = 3;
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <setVocabularySets+0xbc>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	601a      	str	r2, [r3, #0]
	int k = TIM2->CNT %50;
 8000a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <setVocabularySets+0xc0>)
 8000a16:	fba3 1302 	umull	r1, r3, r3, r2
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	2132      	movs	r1, #50	; 0x32
 8000a1e:	fb01 f303 	mul.w	r3, r1, r3
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 25; ++i){
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e014      	b.n	8000a56 <setVocabularySets+0x56>
		if (set[k][i] != NULL){
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	009a      	lsls	r2, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	441a      	add	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <setVocabularySets+0x50>
			size++;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <setVocabularySets+0xc4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <setVocabularySets+0xc4>)
 8000a4e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 25; ++i){
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	2b18      	cmp	r3, #24
 8000a5a:	dde7      	ble.n	8000a2c <setVocabularySets+0x2c>
		}
	}
	//size = sizeof(EasyVocularies[k]);
	for (int i = 0; i < size; ++i){
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	e012      	b.n	8000a88 <setVocabularySets+0x88>
		word[i] = set[k][i];
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	009a      	lsls	r2, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	441a      	add	r2, r3
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4413      	add	r3, r2
 8000a76:	7819      	ldrb	r1, [r3, #0]
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <setVocabularySets+0xc8>)
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	460a      	mov	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; ++i){
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	3301      	adds	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <setVocabularySets+0xc4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dbe7      	blt.n	8000a62 <setVocabularySets+0x62>
	}
	for (int i = size; i < 25; ++i){
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <setVocabularySets+0xc4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e007      	b.n	8000aaa <setVocabularySets+0xaa>
		word[i] = NULL;
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <setVocabularySets+0xc8>)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
	for (int i = size; i < 25; ++i){
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b18      	cmp	r3, #24
 8000aae:	ddf4      	ble.n	8000a9a <setVocabularySets+0x9a>
	}
	//HAL_UART_Transmit(&huart2, word, sizeof(word), Timeout);
}
 8000ab0:	bf00      	nop
 8000ab2:	371c      	adds	r7, #28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	20001168 	.word	0x20001168
 8000ac0:	51eb851f 	.word	0x51eb851f
 8000ac4:	20001170 	.word	0x20001170
 8000ac8:	20001220 	.word	0x20001220

08000acc <startGame>:

void startGame(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0a8      	sub	sp, #160	; 0xa0
 8000ad0:	af00      	add	r7, sp, #0
	state = 2;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <startGame+0x30>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	601a      	str	r2, [r3, #0]
	char Start[] = "\r\n \r\n Now starting the game! Are you ready? How strong are your vocabularies? Choose one Level: \r\n [1] Easy \r\n [2] Medium \r\n [3] Hard \r\n (type 1 or 2 or 3): ";
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <startGame+0x34>)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4611      	mov	r1, r2
 8000ade:	229e      	movs	r2, #158	; 0x9e
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fb2d 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, Start, sizeof(Start), Timeout);
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <startGame+0x38>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4639      	mov	r1, r7
 8000aec:	229e      	movs	r2, #158	; 0x9e
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <startGame+0x3c>)
 8000af0:	f002 fdd7 	bl	80036a2 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, pData, 1, 1000000);
}
 8000af4:	bf00      	nop
 8000af6:	37a0      	adds	r7, #160	; 0xa0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20001168 	.word	0x20001168
 8000b00:	08004994 	.word	0x08004994
 8000b04:	20000f64 	.word	0x20000f64
 8000b08:	200011e0 	.word	0x200011e0

08000b0c <howToPlay>:

void howToPlay(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0e4      	sub	sp, #400	; 0x190
 8000b10:	af00      	add	r7, sp, #0
	state = 1;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <howToPlay+0x5c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
	char How[] = "\r\n \r\n This is how you are going to play this game: \r\n [1] You guess the character that you think is in the word \r\n [2] You only have limited guess so choose well \r\n [3] of course if you guess all correct character before the quota runs out, you win!";
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <howToPlay+0x60>)
 8000b1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b1e:	4611      	mov	r1, r2
 8000b20:	22fa      	movs	r2, #250	; 0xfa
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fb0c 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, How, sizeof(How), Timeout);
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <howToPlay+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000b30:	22fa      	movs	r2, #250	; 0xfa
 8000b32:	4810      	ldr	r0, [pc, #64]	; (8000b74 <howToPlay+0x68>)
 8000b34:	f002 fdb5 	bl	80036a2 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, pData, 1, 1000000);
	HAL_Delay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f001 f8fc 	bl	8001d38 <HAL_Delay>
	char anoStart[] = "\r\n \r\n Already familiar with the rule? \r\n Now let's Choose the option that you want :\r\n [1] Start \r\n [2] How to play?? \r\n Choose one (type 1 or 2):";
 8000b40:	463b      	mov	r3, r7
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <howToPlay+0x6c>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	4611      	mov	r1, r2
 8000b48:	2393      	movs	r3, #147	; 0x93
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f003 faf8 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, anoStart , sizeof(anoStart), Timeout);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <howToPlay+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4639      	mov	r1, r7
 8000b56:	2293      	movs	r2, #147	; 0x93
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <howToPlay+0x68>)
 8000b5a:	f002 fda2 	bl	80036a2 <HAL_UART_Transmit>
}
 8000b5e:	bf00      	nop
 8000b60:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20001168 	.word	0x20001168
 8000b6c:	08004a34 	.word	0x08004a34
 8000b70:	20000f64 	.word	0x20000f64
 8000b74:	200011e0 	.word	0x200011e0
 8000b78:	08004b30 	.word	0x08004b30

08000b7c <error1>:

void error1(){
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af00      	add	r7, sp, #0
	state = 1;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <error1+0x64>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
	char Error[] = "\r\n \r\n Such a strange person you are, type only 1 or 2 !!!";
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <error1+0x68>)
 8000b8a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000b8e:	461d      	mov	r5, r3
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba0:	c403      	stmia	r4!, {r0, r1}
 8000ba2:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, Error, sizeof(Error), Timeout);
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <error1+0x6c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000bac:	223a      	movs	r2, #58	; 0x3a
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <error1+0x70>)
 8000bb0:	f002 fd77 	bl	80036a2 <HAL_UART_Transmit>
	char TryAgain[] = "\r\n Now Try again, remember, type only 1 or 2 !!!!";
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <error1+0x74>)
 8000bb6:	463c      	mov	r4, r7
 8000bb8:	461d      	mov	r5, r3
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, TryAgain, sizeof(TryAgain), Timeout);
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <error1+0x6c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4639      	mov	r1, r7
 8000bd0:	2232      	movs	r2, #50	; 0x32
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <error1+0x70>)
 8000bd4:	f002 fd65 	bl	80036a2 <HAL_UART_Transmit>
}
 8000bd8:	bf00      	nop
 8000bda:	3770      	adds	r7, #112	; 0x70
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bdb0      	pop	{r4, r5, r7, pc}
 8000be0:	20001168 	.word	0x20001168
 8000be4:	08004bc4 	.word	0x08004bc4
 8000be8:	20000f64 	.word	0x20000f64
 8000bec:	200011e0 	.word	0x200011e0
 8000bf0:	08004c00 	.word	0x08004c00

08000bf4 <buttonPushStart>:

void buttonPushStart(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	if (start == 0){
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <buttonPushStart+0x2c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10c      	bne.n	8000c1a <buttonPushStart+0x26>
		start = 1;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <buttonPushStart+0x2c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
		state = 1;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <buttonPushStart+0x30>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, StartString , sizeof(StartString), Timeout);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <buttonPushStart+0x34>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	227f      	movs	r2, #127	; 0x7f
 8000c12:	4906      	ldr	r1, [pc, #24]	; (8000c2c <buttonPushStart+0x38>)
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <buttonPushStart+0x3c>)
 8000c16:	f002 fd44 	bl	80036a2 <HAL_UART_Transmit>
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20001164 	.word	0x20001164
 8000c24:	20001168 	.word	0x20001168
 8000c28:	20000f64 	.word	0x20000f64
 8000c2c:	2000001c 	.word	0x2000001c
 8000c30:	200011e0 	.word	0x200011e0

08000c34 <startEasy>:

void startEasy(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b096      	sub	sp, #88	; 0x58
 8000c38:	af00      	add	r7, sp, #0
	char easy[] = " \r\n \r\n Always start small right? Let's see if you can defeat the easiest level! \r\n";
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <startEasy+0x40>)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4611      	mov	r1, r2
 8000c40:	2253      	movs	r2, #83	; 0x53
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fa7c 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, easy , sizeof(easy), Timeout);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <startEasy+0x44>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	1d39      	adds	r1, r7, #4
 8000c4e:	2253      	movs	r2, #83	; 0x53
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <startEasy+0x48>)
 8000c52:	f002 fd26 	bl	80036a2 <HAL_UART_Transmit>
	HAL_Delay(1800);
 8000c56:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000c5a:	f001 f86d 	bl	8001d38 <HAL_Delay>
	setVocabularySets(EasyVocularies);
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <startEasy+0x4c>)
 8000c60:	f7ff fece 	bl	8000a00 <setVocabularySets>
	mode = 1;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <startEasy+0x50>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	3758      	adds	r7, #88	; 0x58
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08004c34 	.word	0x08004c34
 8000c78:	20000f64 	.word	0x20000f64
 8000c7c:	200011e0 	.word	0x200011e0
 8000c80:	20000a64 	.word	0x20000a64
 8000c84:	2000116c 	.word	0x2000116c

08000c88 <startMedium>:

void startMedium(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09e      	sub	sp, #120	; 0x78
 8000c8c:	af00      	add	r7, sp, #0
	char middle[] = "\r\n \r\n Like to choose things in the middle ha? These medium-level vocabularies are not so easy as you would think! \r\n";
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <startMedium+0x40>)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4611      	mov	r1, r2
 8000c94:	2275      	movs	r2, #117	; 0x75
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fa52 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, middle , sizeof(middle), Timeout);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <startMedium+0x44>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	2275      	movs	r2, #117	; 0x75
 8000ca4:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <startMedium+0x48>)
 8000ca6:	f002 fcfc 	bl	80036a2 <HAL_UART_Transmit>
	HAL_Delay(1800);
 8000caa:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000cae:	f001 f843 	bl	8001d38 <HAL_Delay>
	setVocabularySets(MediumVocabularies);
 8000cb2:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <startMedium+0x4c>)
 8000cb4:	f7ff fea4 	bl	8000a00 <setVocabularySets>
	mode = 2;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <startMedium+0x50>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	601a      	str	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	3778      	adds	r7, #120	; 0x78
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08004c88 	.word	0x08004c88
 8000ccc:	20000f64 	.word	0x20000f64
 8000cd0:	200011e0 	.word	0x200011e0
 8000cd4:	20000580 	.word	0x20000580
 8000cd8:	2000116c 	.word	0x2000116c

08000cdc <startHard>:

void startHard(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af00      	add	r7, sp, #0
	char Hard[] = "\r\n \r\n Such a brave lad you are!!! This is the toughest of all the levels, don't expect it to be your level!! \r\n";
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <startHard+0x40>)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	2270      	movs	r2, #112	; 0x70
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fa28 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, Hard , sizeof(Hard), Timeout);
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <startHard+0x44>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2270      	movs	r2, #112	; 0x70
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <startHard+0x48>)
 8000cfa:	f002 fcd2 	bl	80036a2 <HAL_UART_Transmit>
	HAL_Delay(1800);
 8000cfe:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000d02:	f001 f819 	bl	8001d38 <HAL_Delay>
	setVocabularySets(HardVocabularies);
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <startHard+0x4c>)
 8000d08:	f7ff fe7a 	bl	8000a00 <setVocabularySets>
	mode = 3;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <startHard+0x50>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	601a      	str	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	3770      	adds	r7, #112	; 0x70
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08004d00 	.word	0x08004d00
 8000d20:	20000f64 	.word	0x20000f64
 8000d24:	200011e0 	.word	0x200011e0
 8000d28:	2000009c 	.word	0x2000009c
 8000d2c:	2000116c 	.word	0x2000116c

08000d30 <error2>:
char myword[25];
void error2(){
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b09e      	sub	sp, #120	; 0x78
 8000d34:	af00      	add	r7, sp, #0
	state = 2;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <error2+0x6c>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	601a      	str	r2, [r3, #0]
	char Error[] = "\r\n \r\n Such a strange person you are, type only 1, 2, or 3 !!!";
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <error2+0x70>)
 8000d3e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d42:	461d      	mov	r5, r3
 8000d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d54:	c407      	stmia	r4!, {r0, r1, r2}
 8000d56:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, Error, sizeof(Error), Timeout);
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <error2+0x74>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d60:	223e      	movs	r2, #62	; 0x3e
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <error2+0x78>)
 8000d64:	f002 fc9d 	bl	80036a2 <HAL_UART_Transmit>
	char TryAgain[] = "\r\n Now Try again, remember, type only 1, 2, or 3 !!!!";
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <error2+0x7c>)
 8000d6a:	463c      	mov	r4, r7
 8000d6c:	461d      	mov	r5, r3
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d7e:	6020      	str	r0, [r4, #0]
 8000d80:	3404      	adds	r4, #4
 8000d82:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, TryAgain, sizeof(TryAgain), Timeout);
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <error2+0x74>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	2236      	movs	r2, #54	; 0x36
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <error2+0x78>)
 8000d8e:	f002 fc88 	bl	80036a2 <HAL_UART_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3778      	adds	r7, #120	; 0x78
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20001168 	.word	0x20001168
 8000da0:	08004d70 	.word	0x08004d70
 8000da4:	20000f64 	.word	0x20000f64
 8000da8:	200011e0 	.word	0x200011e0
 8000dac:	08004db0 	.word	0x08004db0

08000db0 <startNow>:
void startNow(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ae      	sub	sp, #184	; 0xb8
 8000db4:	af00      	add	r7, sp, #0
	char StartNow[] = "\r\n \r\n Here are the clue and tips to your words \r\n [1] Your word has ";
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <startNow+0x78>)
 8000db8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	2245      	movs	r2, #69	; 0x45
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 f9bd 	bl	8004140 <memcpy>
	char Continue[2];
	state = 4;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <startNow+0x7c>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	601a      	str	r2, [r3, #0]
	char EndNow[] = " characters... \r\n [2] try typing vowels first (a,e,i,o,u) \r\n\r\n Now let's get started, shall we? \r\n \r\n ";
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <startNow+0x80>)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	2267      	movs	r2, #103	; 0x67
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 f9b3 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, StartNow, sizeof(StartNow), Timeout);
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <startNow+0x84>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000de2:	2245      	movs	r2, #69	; 0x45
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <startNow+0x88>)
 8000de6:	f002 fc5c 	bl	80036a2 <HAL_UART_Transmit>
	sprintf(Continue,"%d", size);
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <startNow+0x8c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000df2:	4913      	ldr	r1, [pc, #76]	; (8000e40 <startNow+0x90>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 f9b7 	bl	8004168 <siprintf>
	HAL_UART_Transmit(&huart2, Continue, sizeof(Continue), Timeout);
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <startNow+0x84>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000e02:	2202      	movs	r2, #2
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <startNow+0x88>)
 8000e06:	f002 fc4c 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, EndNow, sizeof(EndNow), Timeout);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <startNow+0x84>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1d39      	adds	r1, r7, #4
 8000e10:	2267      	movs	r2, #103	; 0x67
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <startNow+0x88>)
 8000e14:	f002 fc45 	bl	80036a2 <HAL_UART_Transmit>
	HAL_Delay(1800);
 8000e18:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000e1c:	f000 ff8c 	bl	8001d38 <HAL_Delay>
}
 8000e20:	bf00      	nop
 8000e22:	37b8      	adds	r7, #184	; 0xb8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08004dec 	.word	0x08004dec
 8000e2c:	20001168 	.word	0x20001168
 8000e30:	08004e34 	.word	0x08004e34
 8000e34:	20000f64 	.word	0x20000f64
 8000e38:	200011e0 	.word	0x200011e0
 8000e3c:	20001170 	.word	0x20001170
 8000e40:	08004de8 	.word	0x08004de8

08000e44 <firstTurn>:

void firstTurn(){
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e46:	b0ad      	sub	sp, #180	; 0xb4
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	466b      	mov	r3, sp
 8000e4c:	461e      	mov	r6, r3
	state = 5;
 8000e4e:	4b8c      	ldr	r3, [pc, #560]	; (8001080 <firstTurn+0x23c>)
 8000e50:	2205      	movs	r2, #5
 8000e52:	601a      	str	r2, [r3, #0]
	char underscore[size*2];
 8000e54:	4b8b      	ldr	r3, [pc, #556]	; (8001084 <firstTurn+0x240>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0058      	lsls	r0, r3, #1
 8000e5a:	1e43      	subs	r3, r0, #1
 8000e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000e60:	4603      	mov	r3, r0
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	f04f 0400 	mov.w	r4, #0
 8000e70:	00d4      	lsls	r4, r2, #3
 8000e72:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e76:	00cb      	lsls	r3, r1, #3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	f04f 0400 	mov.w	r4, #0
 8000e88:	00d4      	lsls	r4, r2, #3
 8000e8a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e8e:	00cb      	lsls	r3, r1, #3
 8000e90:	4603      	mov	r3, r0
 8000e92:	3307      	adds	r3, #7
 8000e94:	08db      	lsrs	r3, r3, #3
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	ebad 0d03 	sub.w	sp, sp, r3
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	3300      	adds	r3, #0
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char stretchedword[size*2];
 8000ea4:	4b77      	ldr	r3, [pc, #476]	; (8001084 <firstTurn+0x240>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0058      	lsls	r0, r3, #1
 8000eaa:	1e43      	subs	r3, r0, #1
 8000eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	f04f 0400 	mov.w	r4, #0
 8000ec0:	00d4      	lsls	r4, r2, #3
 8000ec2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ec6:	00cb      	lsls	r3, r1, #3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	f04f 0400 	mov.w	r4, #0
 8000ed8:	00d4      	lsls	r4, r2, #3
 8000eda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ede:	00cb      	lsls	r3, r1, #3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	3307      	adds	r3, #7
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8000eec:	466b      	mov	r3, sp
 8000eee:	3300      	adds	r3, #0
 8000ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	for (int i = 0; i < size*2; ++i){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000efa:	e03b      	b.n	8000f74 <firstTurn+0x130>
		if (i % 2 == 0){
 8000efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11c      	bne.n	8000f42 <firstTurn+0xfe>
			underscore[i] = '_';
 8000f08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f10:	4413      	add	r3, r2
 8000f12:	225f      	movs	r2, #95	; 0x5f
 8000f14:	701a      	strb	r2, [r3, #0]
			stretchedword[i] = word[i/2];
 8000f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f1a:	0fda      	lsrs	r2, r3, #31
 8000f1c:	4413      	add	r3, r2
 8000f1e:	105b      	asrs	r3, r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b59      	ldr	r3, [pc, #356]	; (8001088 <firstTurn+0x244>)
 8000f24:	5c99      	ldrb	r1, [r3, r2]
 8000f26:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
			myword[i] = ' ';
 8000f34:	4a55      	ldr	r2, [pc, #340]	; (800108c <firstTurn+0x248>)
 8000f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e013      	b.n	8000f6a <firstTurn+0x126>
		}
		else{
			underscore[i] = ' ';
 8000f42:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	701a      	strb	r2, [r3, #0]
			stretchedword[i] = ' ';
 8000f50:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f58:	4413      	add	r3, r2
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	701a      	strb	r2, [r3, #0]
			myword[i] = ' ';
 8000f5e:	4a4b      	ldr	r2, [pc, #300]	; (800108c <firstTurn+0x248>)
 8000f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f64:	4413      	add	r3, r2
 8000f66:	2220      	movs	r2, #32
 8000f68:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size*2; ++i){
 8000f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f74:	4b43      	ldr	r3, [pc, #268]	; (8001084 <firstTurn+0x240>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dbbc      	blt.n	8000efc <firstTurn+0xb8>
		}
	}

	//HAL_UART_Transmit(&huart2, stretchedword, size*2, Timeout);
	HAL_UART_Transmit(&huart2, myword, size*2, Timeout);
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <firstTurn+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <firstTurn+0x24c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	493e      	ldr	r1, [pc, #248]	; (800108c <firstTurn+0x248>)
 8000f92:	4840      	ldr	r0, [pc, #256]	; (8001094 <firstTurn+0x250>)
 8000f94:	f002 fb85 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 4, Timeout);
 8000f98:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <firstTurn+0x24c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	493e      	ldr	r1, [pc, #248]	; (8001098 <firstTurn+0x254>)
 8000fa0:	483c      	ldr	r0, [pc, #240]	; (8001094 <firstTurn+0x250>)
 8000fa2:	f002 fb7e 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " ", 1, Timeout);
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <firstTurn+0x24c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	493b      	ldr	r1, [pc, #236]	; (800109c <firstTurn+0x258>)
 8000fae:	4839      	ldr	r0, [pc, #228]	; (8001094 <firstTurn+0x250>)
 8000fb0:	f002 fb77 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, underscore, size*2, Timeout);
 8000fb4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <firstTurn+0x240>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <firstTurn+0x24c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <firstTurn+0x250>)
 8000fc8:	f002 fb6b 	bl	80036a2 <HAL_UART_Transmit>
	char after[] = "\r\n \r\n Now choose (or guess) a character that you think is in this word... : ";
 8000fcc:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <firstTurn+0x25c>)
 8000fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	224d      	movs	r2, #77	; 0x4d
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f8b2 	bl	8004140 <memcpy>
	char format[] = "(%d characters) used characters : ";
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <firstTurn+0x260>)
 8000fde:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	8022      	strh	r2, [r4, #0]
 8000ff2:	3402      	adds	r4, #2
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	7023      	strb	r3, [r4, #0]
	char HereIsYourWords[sizeof(format)-1];
	sprintf(HereIsYourWords,format, size);
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <firstTurn+0x240>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f003 f8b0 	bl	8004168 <siprintf>
	HAL_UART_Transmit(&huart2, HereIsYourWords, sizeof(HereIsYourWords), Timeout);
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <firstTurn+0x24c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	2222      	movs	r2, #34	; 0x22
 8001010:	4820      	ldr	r0, [pc, #128]	; (8001094 <firstTurn+0x250>)
 8001012:	f002 fb46 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, usedCharacter, sizeof(usedCharacter), Timeout);
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <firstTurn+0x24c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	221b      	movs	r2, #27
 800101c:	4922      	ldr	r1, [pc, #136]	; (80010a8 <firstTurn+0x264>)
 800101e:	481d      	ldr	r0, [pc, #116]	; (8001094 <firstTurn+0x250>)
 8001020:	f002 fb3f 	bl	80036a2 <HAL_UART_Transmit>
	char Try[2];
	sprintf(Try,"%d",try);
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <firstTurn+0x268>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	463b      	mov	r3, r7
 800102a:	4921      	ldr	r1, [pc, #132]	; (80010b0 <firstTurn+0x26c>)
 800102c:	4618      	mov	r0, r3
 800102e:	f003 f89b 	bl	8004168 <siprintf>
	HAL_UART_Transmit(&huart2, "\r\n\r\n", 8, Timeout);
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <firstTurn+0x24c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2208      	movs	r2, #8
 8001038:	491e      	ldr	r1, [pc, #120]	; (80010b4 <firstTurn+0x270>)
 800103a:	4816      	ldr	r0, [pc, #88]	; (8001094 <firstTurn+0x250>)
 800103c:	f002 fb31 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " Try left: ", 11, Timeout);
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <firstTurn+0x24c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	220b      	movs	r2, #11
 8001046:	491c      	ldr	r1, [pc, #112]	; (80010b8 <firstTurn+0x274>)
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <firstTurn+0x250>)
 800104a:	f002 fb2a 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Try, sizeof(Try), Timeout);
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <firstTurn+0x24c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4639      	mov	r1, r7
 8001054:	2202      	movs	r2, #2
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <firstTurn+0x250>)
 8001058:	f002 fb23 	bl	80036a2 <HAL_UART_Transmit>
	HAL_Delay(500);
 800105c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001060:	f000 fe6a 	bl	8001d38 <HAL_Delay>
	HAL_UART_Transmit(&huart2, after, sizeof(after), Timeout);
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <firstTurn+0x24c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800106c:	224d      	movs	r2, #77	; 0x4d
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <firstTurn+0x250>)
 8001070:	f002 fb17 	bl	80036a2 <HAL_UART_Transmit>
 8001074:	46b5      	mov	sp, r6
}
 8001076:	bf00      	nop
 8001078:	37b4      	adds	r7, #180	; 0xb4
 800107a:	46bd      	mov	sp, r7
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107e:	bf00      	nop
 8001080:	20001168 	.word	0x20001168
 8001084:	20001170 	.word	0x20001170
 8001088:	20001220 	.word	0x20001220
 800108c:	20001184 	.word	0x20001184
 8001090:	20000f64 	.word	0x20000f64
 8001094:	200011e0 	.word	0x200011e0
 8001098:	08004e9c 	.word	0x08004e9c
 800109c:	08004ea0 	.word	0x08004ea0
 80010a0:	08004eb8 	.word	0x08004eb8
 80010a4:	08004f08 	.word	0x08004f08
 80010a8:	20000f48 	.word	0x20000f48
 80010ac:	20000f68 	.word	0x20000f68
 80010b0:	08004de8 	.word	0x08004de8
 80010b4:	08004ea4 	.word	0x08004ea4
 80010b8:	08004eac 	.word	0x08004eac

080010bc <nextTurn>:

void nextTurn(){
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	b0af      	sub	sp, #188	; 0xbc
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	466b      	mov	r3, sp
 80010c4:	461e      	mov	r6, r3
	char underscore[size*2];
 80010c6:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <nextTurn+0x23c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0058      	lsls	r0, r3, #1
 80010cc:	1e43      	subs	r3, r0, #1
 80010ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010d2:	4603      	mov	r3, r0
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	f04f 0400 	mov.w	r4, #0
 80010e2:	00d4      	lsls	r4, r2, #3
 80010e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010e8:	00cb      	lsls	r3, r1, #3
 80010ea:	4603      	mov	r3, r0
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	f04f 0400 	mov.w	r4, #0
 80010fa:	00d4      	lsls	r4, r2, #3
 80010fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001100:	00cb      	lsls	r3, r1, #3
 8001102:	4603      	mov	r3, r0
 8001104:	3307      	adds	r3, #7
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	ebad 0d03 	sub.w	sp, sp, r3
 800110e:	466b      	mov	r3, sp
 8001110:	3300      	adds	r3, #0
 8001112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char stretchedword[size*2];
 8001116:	4b78      	ldr	r3, [pc, #480]	; (80012f8 <nextTurn+0x23c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0058      	lsls	r0, r3, #1
 800111c:	1e43      	subs	r3, r0, #1
 800111e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	f04f 0400 	mov.w	r4, #0
 8001132:	00d4      	lsls	r4, r2, #3
 8001134:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001138:	00cb      	lsls	r3, r1, #3
 800113a:	4603      	mov	r3, r0
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	f04f 0400 	mov.w	r4, #0
 800114a:	00d4      	lsls	r4, r2, #3
 800114c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001150:	00cb      	lsls	r3, r1, #3
 8001152:	4603      	mov	r3, r0
 8001154:	3307      	adds	r3, #7
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	ebad 0d03 	sub.w	sp, sp, r3
 800115e:	466b      	mov	r3, sp
 8001160:	3300      	adds	r3, #0
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for (int i = 0; i < size*2; ++i){
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800116c:	e02f      	b.n	80011ce <nextTurn+0x112>
		if (i % 2 == 0){
 800116e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d116      	bne.n	80011a8 <nextTurn+0xec>
			underscore[i] = '_';
 800117a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800117e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001182:	4413      	add	r3, r2
 8001184:	225f      	movs	r2, #95	; 0x5f
 8001186:	701a      	strb	r2, [r3, #0]
			stretchedword[i] = word[i/2];
 8001188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800118c:	0fda      	lsrs	r2, r3, #31
 800118e:	4413      	add	r3, r2
 8001190:	105b      	asrs	r3, r3, #1
 8001192:	461a      	mov	r2, r3
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <nextTurn+0x240>)
 8001196:	5c99      	ldrb	r1, [r3, r2]
 8001198:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800119c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011a0:	4413      	add	r3, r2
 80011a2:	460a      	mov	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e00d      	b.n	80011c4 <nextTurn+0x108>
		}
		else{
			underscore[i] = ' ';
 80011a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80011ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011b0:	4413      	add	r3, r2
 80011b2:	2220      	movs	r2, #32
 80011b4:	701a      	strb	r2, [r3, #0]
			stretchedword[i] = ' ';
 80011b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80011ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011be:	4413      	add	r3, r2
 80011c0:	2220      	movs	r2, #32
 80011c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size*2; ++i){
 80011c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011c8:	3301      	adds	r3, #1
 80011ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80011ce:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <nextTurn+0x23c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbc8      	blt.n	800116e <nextTurn+0xb2>
		}
	}

	//HAL_UART_Transmit(&huart2, stretchedword, size*2, Timeout);
	HAL_UART_Transmit(&huart2, "\r\n\r\n", 8, Timeout);
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <nextTurn+0x244>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2208      	movs	r2, #8
 80011e2:	4948      	ldr	r1, [pc, #288]	; (8001304 <nextTurn+0x248>)
 80011e4:	4848      	ldr	r0, [pc, #288]	; (8001308 <nextTurn+0x24c>)
 80011e6:	f002 fa5c 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " ", 1, Timeout);
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <nextTurn+0x244>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4946      	ldr	r1, [pc, #280]	; (800130c <nextTurn+0x250>)
 80011f2:	4845      	ldr	r0, [pc, #276]	; (8001308 <nextTurn+0x24c>)
 80011f4:	f002 fa55 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, myword, size*2, Timeout);
 80011f8:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <nextTurn+0x23c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <nextTurn+0x244>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4942      	ldr	r1, [pc, #264]	; (8001310 <nextTurn+0x254>)
 8001208:	483f      	ldr	r0, [pc, #252]	; (8001308 <nextTurn+0x24c>)
 800120a:	f002 fa4a 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 4, Timeout);
 800120e:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <nextTurn+0x244>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2204      	movs	r2, #4
 8001214:	493f      	ldr	r1, [pc, #252]	; (8001314 <nextTurn+0x258>)
 8001216:	483c      	ldr	r0, [pc, #240]	; (8001308 <nextTurn+0x24c>)
 8001218:	f002 fa43 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " ", 1, Timeout);
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <nextTurn+0x244>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	493a      	ldr	r1, [pc, #232]	; (800130c <nextTurn+0x250>)
 8001224:	4838      	ldr	r0, [pc, #224]	; (8001308 <nextTurn+0x24c>)
 8001226:	f002 fa3c 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, underscore, size*2, Timeout);
 800122a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <nextTurn+0x23c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <nextTurn+0x244>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4832      	ldr	r0, [pc, #200]	; (8001308 <nextTurn+0x24c>)
 800123e:	f002 fa30 	bl	80036a2 <HAL_UART_Transmit>
	char after[] = "\r\n \r\n Now choose (or guess) another character that you think is in this word... : ";
 8001242:	4a35      	ldr	r2, [pc, #212]	; (8001318 <nextTurn+0x25c>)
 8001244:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001248:	4611      	mov	r1, r2
 800124a:	2253      	movs	r2, #83	; 0x53
 800124c:	4618      	mov	r0, r3
 800124e:	f002 ff77 	bl	8004140 <memcpy>
	char format[] = "(%d characters) used characters : ";
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <nextTurn+0x260>)
 8001254:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001258:	461d      	mov	r5, r3
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	8022      	strh	r2, [r4, #0]
 8001268:	3402      	adds	r4, #2
 800126a:	0c1b      	lsrs	r3, r3, #16
 800126c:	7023      	strb	r3, [r4, #0]
	char HereIsYourWords[sizeof(format)-1];
	sprintf(HereIsYourWords,format, size);
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <nextTurn+0x23c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4618      	mov	r0, r3
 800127c:	f002 ff74 	bl	8004168 <siprintf>
	HAL_UART_Transmit(&huart2, HereIsYourWords, sizeof(HereIsYourWords), Timeout);
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <nextTurn+0x244>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f107 0108 	add.w	r1, r7, #8
 8001288:	2222      	movs	r2, #34	; 0x22
 800128a:	481f      	ldr	r0, [pc, #124]	; (8001308 <nextTurn+0x24c>)
 800128c:	f002 fa09 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, usedCharacter, sizeof(usedCharacter), Timeout);
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <nextTurn+0x244>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	221b      	movs	r2, #27
 8001296:	4922      	ldr	r1, [pc, #136]	; (8001320 <nextTurn+0x264>)
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <nextTurn+0x24c>)
 800129a:	f002 fa02 	bl	80036a2 <HAL_UART_Transmit>
	char Try[2];
	sprintf(Try,"%d",try);
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <nextTurn+0x268>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4920      	ldr	r1, [pc, #128]	; (8001328 <nextTurn+0x26c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 ff5e 	bl	8004168 <siprintf>
	HAL_UART_Transmit(&huart2, "\r\n\r\n", 8, Timeout);
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <nextTurn+0x244>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <nextTurn+0x248>)
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <nextTurn+0x24c>)
 80012b6:	f002 f9f4 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " Try left: ", 11, Timeout);
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <nextTurn+0x244>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	220b      	movs	r2, #11
 80012c0:	491a      	ldr	r1, [pc, #104]	; (800132c <nextTurn+0x270>)
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <nextTurn+0x24c>)
 80012c4:	f002 f9ed 	bl	80036a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Try, sizeof(Try), Timeout);
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <nextTurn+0x244>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	2202      	movs	r2, #2
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <nextTurn+0x24c>)
 80012d2:	f002 f9e6 	bl	80036a2 <HAL_UART_Transmit>
	HAL_Delay(500);
 80012d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012da:	f000 fd2d 	bl	8001d38 <HAL_Delay>
	HAL_UART_Transmit(&huart2, after, sizeof(after), Timeout);
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <nextTurn+0x244>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80012e6:	2253      	movs	r2, #83	; 0x53
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <nextTurn+0x24c>)
 80012ea:	f002 f9da 	bl	80036a2 <HAL_UART_Transmit>
 80012ee:	46b5      	mov	sp, r6
}
 80012f0:	bf00      	nop
 80012f2:	37bc      	adds	r7, #188	; 0xbc
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f8:	20001170 	.word	0x20001170
 80012fc:	20001220 	.word	0x20001220
 8001300:	20000f64 	.word	0x20000f64
 8001304:	08004ea4 	.word	0x08004ea4
 8001308:	200011e0 	.word	0x200011e0
 800130c:	08004ea0 	.word	0x08004ea0
 8001310:	20001184 	.word	0x20001184
 8001314:	08004e9c 	.word	0x08004e9c
 8001318:	08004f2c 	.word	0x08004f2c
 800131c:	08004f08 	.word	0x08004f08
 8001320:	20000f48 	.word	0x20000f48
 8001324:	20000f68 	.word	0x20000f68
 8001328:	08004de8 	.word	0x08004de8
 800132c:	08004eac 	.word	0x08004eac

08001330 <continueTurn>:

void continueTurn(){
 8001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001334:	b0d2      	sub	sp, #328	; 0x148
 8001336:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart2, pData, 1, Timeout) == HAL_OK){
 8001338:	4bbf      	ldr	r3, [pc, #764]	; (8001638 <continueTurn+0x308>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	49bf      	ldr	r1, [pc, #764]	; (800163c <continueTurn+0x30c>)
 8001340:	48bf      	ldr	r0, [pc, #764]	; (8001640 <continueTurn+0x310>)
 8001342:	f002 fa47 	bl	80037d4 <HAL_UART_Receive>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 82d8 	bne.w	80018fe <continueTurn+0x5ce>
 800134e:	466b      	mov	r3, sp
 8001350:	4698      	mov	r8, r3
		int check = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		int inword = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		int win = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		char stretchedword[size*2];
 8001364:	4bb7      	ldr	r3, [pc, #732]	; (8001644 <continueTurn+0x314>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	005e      	lsls	r6, r3, #1
 800136a:	1e73      	subs	r3, r6, #1
 800136c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001370:	4633      	mov	r3, r6
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	f04f 0400 	mov.w	r4, #0
 8001380:	00d4      	lsls	r4, r2, #3
 8001382:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001386:	00cb      	lsls	r3, r1, #3
 8001388:	4633      	mov	r3, r6
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	f04f 0400 	mov.w	r4, #0
 8001398:	00d4      	lsls	r4, r2, #3
 800139a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800139e:	00cb      	lsls	r3, r1, #3
 80013a0:	4633      	mov	r3, r6
 80013a2:	3307      	adds	r3, #7
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	ebad 0d03 	sub.w	sp, sp, r3
 80013ac:	466b      	mov	r3, sp
 80013ae:	3300      	adds	r3, #0
 80013b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		for (int i = 0; i < size*2; ++i){
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80013ba:	e021      	b.n	8001400 <continueTurn+0xd0>
			if (i % 2 == 0){
 80013bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10f      	bne.n	80013e8 <continueTurn+0xb8>
				stretchedword[i] = word[i/2];
 80013c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013cc:	0fda      	lsrs	r2, r3, #31
 80013ce:	4413      	add	r3, r2
 80013d0:	105b      	asrs	r3, r3, #1
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b9c      	ldr	r3, [pc, #624]	; (8001648 <continueTurn+0x318>)
 80013d6:	5c99      	ldrb	r1, [r3, r2]
 80013d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80013dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013e0:	4413      	add	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e006      	b.n	80013f6 <continueTurn+0xc6>
			}
			else{
				stretchedword[i] = ' ';
 80013e8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80013ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013f0:	4413      	add	r3, r2
 80013f2:	2220      	movs	r2, #32
 80013f4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < size*2; ++i){
 80013f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013fa:	3301      	adds	r3, #1
 80013fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001400:	4b90      	ldr	r3, [pc, #576]	; (8001644 <continueTurn+0x314>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800140a:	429a      	cmp	r2, r3
 800140c:	dbd6      	blt.n	80013bc <continueTurn+0x8c>
			}
		}
		if (!isdigit(pData[0])){
 800140e:	f002 fe77 	bl	8004100 <__locale_ctype_ptr>
 8001412:	4602      	mov	r2, r0
 8001414:	4b89      	ldr	r3, [pc, #548]	; (800163c <continueTurn+0x30c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 8241 	bne.w	80018aa <continueTurn+0x57a>
			for (int i = 0; i < sizeof(alphabet); ++i){
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800142e:	e025      	b.n	800147c <continueTurn+0x14c>
				if (pData[0] == alphabet[i]){
 8001430:	4b82      	ldr	r3, [pc, #520]	; (800163c <continueTurn+0x30c>)
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4985      	ldr	r1, [pc, #532]	; (800164c <continueTurn+0x31c>)
 8001436:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800143a:	440b      	add	r3, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d117      	bne.n	8001472 <continueTurn+0x142>
					if (usedCharacter[i] == pData[0]){
 8001442:	4a83      	ldr	r2, [pc, #524]	; (8001650 <continueTurn+0x320>)
 8001444:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001448:	4413      	add	r3, r2
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	4b7b      	ldr	r3, [pc, #492]	; (800163c <continueTurn+0x30c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d103      	bne.n	800145c <continueTurn+0x12c>
						check = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800145a:	e00a      	b.n	8001472 <continueTurn+0x142>
					}
					else{
						usedCharacter[i] = pData[0];
 800145c:	4b77      	ldr	r3, [pc, #476]	; (800163c <continueTurn+0x30c>)
 800145e:	7819      	ldrb	r1, [r3, #0]
 8001460:	4a7b      	ldr	r2, [pc, #492]	; (8001650 <continueTurn+0x320>)
 8001462:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001466:	4413      	add	r3, r2
 8001468:	460a      	mov	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
						check = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			for (int i = 0; i < sizeof(alphabet); ++i){
 8001472:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001476:	3301      	adds	r3, #1
 8001478:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800147c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001480:	2b1a      	cmp	r3, #26
 8001482:	d9d5      	bls.n	8001430 <continueTurn+0x100>
					}
				}
			}
			if (check == 1) {
 8001484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001488:	2b01      	cmp	r3, #1
 800148a:	d121      	bne.n	80014d0 <continueTurn+0x1a0>
				for (int i = 0; i < size; ++i){
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001492:	e017      	b.n	80014c4 <continueTurn+0x194>
					if (pData[0] == word[i]){
 8001494:	4b69      	ldr	r3, [pc, #420]	; (800163c <continueTurn+0x30c>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	496b      	ldr	r1, [pc, #428]	; (8001648 <continueTurn+0x318>)
 800149a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800149e:	440b      	add	r3, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d109      	bne.n	80014ba <continueTurn+0x18a>
						myword[2*i] = pData[0];
 80014a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4a63      	ldr	r2, [pc, #396]	; (800163c <continueTurn+0x30c>)
 80014ae:	7811      	ldrb	r1, [r2, #0]
 80014b0:	4a68      	ldr	r2, [pc, #416]	; (8001654 <continueTurn+0x324>)
 80014b2:	54d1      	strb	r1, [r2, r3]
						inword = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				for (int i = 0; i < size; ++i){
 80014ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014be:	3301      	adds	r3, #1
 80014c0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80014c4:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <continueTurn+0x314>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbe1      	blt.n	8001494 <continueTurn+0x164>
					}
				}
			}
			for (int i = 0; i < size; ++i){
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80014d6:	e00e      	b.n	80014f6 <continueTurn+0x1c6>
				if (myword[i*2] == ' '){
 80014d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4a5d      	ldr	r2, [pc, #372]	; (8001654 <continueTurn+0x324>)
 80014e0:	5cd3      	ldrb	r3, [r2, r3]
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d102      	bne.n	80014ec <continueTurn+0x1bc>
					win = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			for (int i = 0; i < size; ++i){
 80014ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80014f0:	3301      	adds	r3, #1
 80014f2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <continueTurn+0x314>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbea      	blt.n	80014d8 <continueTurn+0x1a8>
				}
			}
			if (win) {
 8001502:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01d      	beq.n	8001546 <continueTurn+0x216>
				char win[] = "\r\n \r\n Congratulations you get the whole word right!! ";
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4a52      	ldr	r2, [pc, #328]	; (8001658 <continueTurn+0x328>)
 800150e:	461c      	mov	r4, r3
 8001510:	4615      	mov	r5, r2
 8001512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001522:	6020      	str	r0, [r4, #0]
 8001524:	3404      	adds	r4, #4
 8001526:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, win, sizeof(win), Timeout);
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <continueTurn+0x308>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	2236      	movs	r2, #54	; 0x36
 8001530:	4843      	ldr	r0, [pc, #268]	; (8001640 <continueTurn+0x310>)
 8001532:	f002 f8b6 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8001536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153a:	f000 fbfd 	bl	8001d38 <HAL_Delay>
				state = 6;
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <continueTurn+0x32c>)
 8001540:	2206      	movs	r2, #6
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e0ce      	b.n	80016e4 <continueTurn+0x3b4>
			}
			else if (try == 0){
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <continueTurn+0x330>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d15c      	bne.n	8001608 <continueTurn+0x2d8>
				char Try[2];
				sprintf(Try,"%d",try);
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <continueTurn+0x330>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001556:	4943      	ldr	r1, [pc, #268]	; (8001664 <continueTurn+0x334>)
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fe05 	bl	8004168 <siprintf>
				HAL_UART_Transmit(&huart2, "\r\n\r\n", 8, Timeout);
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <continueTurn+0x308>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2208      	movs	r2, #8
 8001564:	4940      	ldr	r1, [pc, #256]	; (8001668 <continueTurn+0x338>)
 8001566:	4836      	ldr	r0, [pc, #216]	; (8001640 <continueTurn+0x310>)
 8001568:	f002 f89b 	bl	80036a2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, " Try left: ", 11, Timeout);
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <continueTurn+0x308>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	220b      	movs	r2, #11
 8001572:	493e      	ldr	r1, [pc, #248]	; (800166c <continueTurn+0x33c>)
 8001574:	4832      	ldr	r0, [pc, #200]	; (8001640 <continueTurn+0x310>)
 8001576:	f002 f894 	bl	80036a2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, Try, sizeof(Try), Timeout);
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <continueTurn+0x308>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001582:	2202      	movs	r2, #2
 8001584:	482e      	ldr	r0, [pc, #184]	; (8001640 <continueTurn+0x310>)
 8001586:	f002 f88c 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1000);
 800158a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158e:	f000 fbd3 	bl	8001d38 <HAL_Delay>
				char lose[] = "\r\n \r\n Sorry, you lose.... \r\n bad luck this time, hope next time you can do better..";
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4a36      	ldr	r2, [pc, #216]	; (8001670 <continueTurn+0x340>)
 8001596:	4618      	mov	r0, r3
 8001598:	4611      	mov	r1, r2
 800159a:	2354      	movs	r3, #84	; 0x54
 800159c:	461a      	mov	r2, r3
 800159e:	f002 fdcf 	bl	8004140 <memcpy>
				HAL_UART_Transmit(&huart2, lose, sizeof(lose), Timeout);
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <continueTurn+0x308>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1d39      	adds	r1, r7, #4
 80015a8:	2254      	movs	r2, #84	; 0x54
 80015aa:	4825      	ldr	r0, [pc, #148]	; (8001640 <continueTurn+0x310>)
 80015ac:	f002 f879 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b4:	f000 fbc0 	bl	8001d38 <HAL_Delay>
				char reveal[] = "\r\n And the word is.....\r\n \r\n ";
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <continueTurn+0x344>)
 80015ba:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80015be:	461d      	mov	r5, r3
 80015c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015c8:	c407      	stmia	r4!, {r0, r1, r2}
 80015ca:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, reveal, sizeof(reveal), Timeout);
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <continueTurn+0x308>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80015d4:	221e      	movs	r2, #30
 80015d6:	481a      	ldr	r0, [pc, #104]	; (8001640 <continueTurn+0x310>)
 80015d8:	f002 f863 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(500);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f000 fbaa 	bl	8001d38 <HAL_Delay>
				HAL_UART_Transmit(&huart2, stretchedword, sizeof(stretchedword), Timeout);
 80015e4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80015e8:	b2b2      	uxth	r2, r6
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <continueTurn+0x308>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <continueTurn+0x310>)
 80015f0:	f002 f857 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1000);
 80015f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f8:	f000 fb9e 	bl	8001d38 <HAL_Delay>
				state = 6;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <continueTurn+0x32c>)
 80015fe:	2206      	movs	r2, #6
 8001600:	601a      	str	r2, [r3, #0]
				return;
 8001602:	bf00      	nop
 8001604:	46c5      	mov	sp, r8
 8001606:	e17a      	b.n	80018fe <continueTurn+0x5ce>
			}
			else if (check == 2){
 8001608:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800160c:	2b02      	cmp	r3, #2
 800160e:	d135      	bne.n	800167c <continueTurn+0x34c>
				char Same[] = "\r\n \r\n You had already entered this character before!! \r\n Well, we are generous, we won't deduct your try... ";
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <continueTurn+0x348>)
 8001614:	4618      	mov	r0, r3
 8001616:	4611      	mov	r1, r2
 8001618:	236d      	movs	r3, #109	; 0x6d
 800161a:	461a      	mov	r2, r3
 800161c:	f002 fd90 	bl	8004140 <memcpy>
				HAL_UART_Transmit(&huart2, Same, sizeof(Same), Timeout);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <continueTurn+0x308>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	226d      	movs	r2, #109	; 0x6d
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <continueTurn+0x310>)
 800162a:	f002 f83a 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1800);
 800162e:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001632:	f000 fb81 	bl	8001d38 <HAL_Delay>
 8001636:	e055      	b.n	80016e4 <continueTurn+0x3b4>
 8001638:	20000f64 	.word	0x20000f64
 800163c:	20001180 	.word	0x20001180
 8001640:	200011e0 	.word	0x200011e0
 8001644:	20001170 	.word	0x20001170
 8001648:	20001220 	.word	0x20001220
 800164c:	20000000 	.word	0x20000000
 8001650:	20000f48 	.word	0x20000f48
 8001654:	20001184 	.word	0x20001184
 8001658:	08004f80 	.word	0x08004f80
 800165c:	20001168 	.word	0x20001168
 8001660:	20000f68 	.word	0x20000f68
 8001664:	08004de8 	.word	0x08004de8
 8001668:	08004ea4 	.word	0x08004ea4
 800166c:	08004eac 	.word	0x08004eac
 8001670:	08004fb8 	.word	0x08004fb8
 8001674:	0800500c 	.word	0x0800500c
 8001678:	0800502c 	.word	0x0800502c
			}
			else if (inword){
 800167c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <continueTurn+0x37c>
				char right[] = "\r\n \r\n Congrats! You guessed the right character!! Your try won't be deduced";
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4aa0      	ldr	r2, [pc, #640]	; (8001908 <continueTurn+0x5d8>)
 8001688:	4618      	mov	r0, r3
 800168a:	4611      	mov	r1, r2
 800168c:	234c      	movs	r3, #76	; 0x4c
 800168e:	461a      	mov	r2, r3
 8001690:	f002 fd56 	bl	8004140 <memcpy>
				HAL_UART_Transmit(&huart2, right, sizeof(right), Timeout);
 8001694:	4b9d      	ldr	r3, [pc, #628]	; (800190c <continueTurn+0x5dc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	1d39      	adds	r1, r7, #4
 800169a:	224c      	movs	r2, #76	; 0x4c
 800169c:	489c      	ldr	r0, [pc, #624]	; (8001910 <continueTurn+0x5e0>)
 800169e:	f002 f800 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1800);
 80016a2:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80016a6:	f000 fb47 	bl	8001d38 <HAL_Delay>
 80016aa:	e01b      	b.n	80016e4 <continueTurn+0x3b4>
			}
			else if (!inword){
 80016ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d117      	bne.n	80016e4 <continueTurn+0x3b4>
				try--;
 80016b4:	4b97      	ldr	r3, [pc, #604]	; (8001914 <continueTurn+0x5e4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	4a96      	ldr	r2, [pc, #600]	; (8001914 <continueTurn+0x5e4>)
 80016bc:	6013      	str	r3, [r2, #0]
				char wrong[] = "\r\n \r\n Sorry you guessed wrong, \r\n but don't worry, you can try again whenever your try is still avaiable. ";
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4a95      	ldr	r2, [pc, #596]	; (8001918 <continueTurn+0x5e8>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	4611      	mov	r1, r2
 80016c6:	236b      	movs	r3, #107	; 0x6b
 80016c8:	461a      	mov	r2, r3
 80016ca:	f002 fd39 	bl	8004140 <memcpy>
				HAL_UART_Transmit(&huart2, wrong, sizeof(wrong), Timeout);
 80016ce:	4b8f      	ldr	r3, [pc, #572]	; (800190c <continueTurn+0x5dc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1d39      	adds	r1, r7, #4
 80016d4:	226b      	movs	r2, #107	; 0x6b
 80016d6:	488e      	ldr	r0, [pc, #568]	; (8001910 <continueTurn+0x5e0>)
 80016d8:	f001 ffe3 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1800);
 80016dc:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80016e0:	f000 fb2a 	bl	8001d38 <HAL_Delay>
			}
			if (!win){
 80016e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <continueTurn+0x3c2>
				nextTurn();
 80016ec:	f7ff fce6 	bl	80010bc <nextTurn>
 80016f0:	e0ad      	b.n	800184e <continueTurn+0x51e>
			}
			else{
 80016f2:	466b      	mov	r3, sp
 80016f4:	461d      	mov	r5, r3
				char underscore[size*2];
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <continueTurn+0x5ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0058      	lsls	r0, r3, #1
 80016fc:	1e43      	subs	r3, r0, #1
 80016fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	f04f 0400 	mov.w	r4, #0
 8001712:	00d4      	lsls	r4, r2, #3
 8001714:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001718:	00cb      	lsls	r3, r1, #3
 800171a:	4603      	mov	r3, r0
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	00d4      	lsls	r4, r2, #3
 800172c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001730:	00cb      	lsls	r3, r1, #3
 8001732:	4603      	mov	r3, r0
 8001734:	3307      	adds	r3, #7
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	ebad 0d03 	sub.w	sp, sp, r3
 800173e:	466b      	mov	r3, sp
 8001740:	3300      	adds	r3, #0
 8001742:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				char stretchedword[size*2];
 8001746:	4b75      	ldr	r3, [pc, #468]	; (800191c <continueTurn+0x5ec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0058      	lsls	r0, r3, #1
 800174c:	1e43      	subs	r3, r0, #1
 800174e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001752:	4603      	mov	r3, r0
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	f04f 0400 	mov.w	r4, #0
 8001762:	00d4      	lsls	r4, r2, #3
 8001764:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001768:	00cb      	lsls	r3, r1, #3
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	f04f 0400 	mov.w	r4, #0
 800177a:	00d4      	lsls	r4, r2, #3
 800177c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001780:	00cb      	lsls	r3, r1, #3
 8001782:	4603      	mov	r3, r0
 8001784:	3307      	adds	r3, #7
 8001786:	08db      	lsrs	r3, r3, #3
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	ebad 0d03 	sub.w	sp, sp, r3
 800178e:	466b      	mov	r3, sp
 8001790:	3300      	adds	r3, #0
 8001792:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (int i = 0; i < size*2; ++i){
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800179c:	e02f      	b.n	80017fe <continueTurn+0x4ce>
					if (i % 2 == 0){
 800179e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <continueTurn+0x4a8>
						underscore[i] = '_';
 80017aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017b2:	4413      	add	r3, r2
 80017b4:	225f      	movs	r2, #95	; 0x5f
 80017b6:	701a      	strb	r2, [r3, #0]
						stretchedword[i] = word[i/2];
 80017b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017bc:	0fda      	lsrs	r2, r3, #31
 80017be:	4413      	add	r3, r2
 80017c0:	105b      	asrs	r3, r3, #1
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <continueTurn+0x5f0>)
 80017c6:	5c99      	ldrb	r1, [r3, r2]
 80017c8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80017cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017d0:	4413      	add	r3, r2
 80017d2:	460a      	mov	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e00d      	b.n	80017f4 <continueTurn+0x4c4>
					}
					else{
						underscore[i] = ' ';
 80017d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017e0:	4413      	add	r3, r2
 80017e2:	2220      	movs	r2, #32
 80017e4:	701a      	strb	r2, [r3, #0]
						stretchedword[i] = ' ';
 80017e6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80017ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017ee:	4413      	add	r3, r2
 80017f0:	2220      	movs	r2, #32
 80017f2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < size*2; ++i){
 80017f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017f8:	3301      	adds	r3, #1
 80017fa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <continueTurn+0x5ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001808:	429a      	cmp	r2, r3
 800180a:	dbc8      	blt.n	800179e <continueTurn+0x46e>
					}
				}

				//HAL_UART_Transmit(&huart2, stretchedword, size*2, Timeout);
				HAL_UART_Transmit(&huart2, "\r\n\r\n", 8, Timeout);
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <continueTurn+0x5dc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2208      	movs	r2, #8
 8001812:	4944      	ldr	r1, [pc, #272]	; (8001924 <continueTurn+0x5f4>)
 8001814:	483e      	ldr	r0, [pc, #248]	; (8001910 <continueTurn+0x5e0>)
 8001816:	f001 ff44 	bl	80036a2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, " ", 1, Timeout);
 800181a:	4b3c      	ldr	r3, [pc, #240]	; (800190c <continueTurn+0x5dc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	4941      	ldr	r1, [pc, #260]	; (8001928 <continueTurn+0x5f8>)
 8001822:	483b      	ldr	r0, [pc, #236]	; (8001910 <continueTurn+0x5e0>)
 8001824:	f001 ff3d 	bl	80036a2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, myword, size*2, Timeout);
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <continueTurn+0x5ec>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <continueTurn+0x5dc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	493d      	ldr	r1, [pc, #244]	; (800192c <continueTurn+0x5fc>)
 8001838:	4835      	ldr	r0, [pc, #212]	; (8001910 <continueTurn+0x5e0>)
 800183a:	f001 ff32 	bl	80036a2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n", 4, Timeout);
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <continueTurn+0x5dc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2204      	movs	r2, #4
 8001844:	493a      	ldr	r1, [pc, #232]	; (8001930 <continueTurn+0x600>)
 8001846:	4832      	ldr	r0, [pc, #200]	; (8001910 <continueTurn+0x5e0>)
 8001848:	f001 ff2b 	bl	80036a2 <HAL_UART_Transmit>
 800184c:	46ad      	mov	sp, r5
			}
			if (check == 0){
 800184e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001852:	2b00      	cmp	r3, #0
 8001854:	d152      	bne.n	80018fc <continueTurn+0x5cc>
				char Error[] = "\r\n\r\n The word does not have this character for sure!!! \r\n Have you read the how to play guide? \r\n The word does not contain the strange symbol that you type!! \r\n The word contains only a-z";
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4a36      	ldr	r2, [pc, #216]	; (8001934 <continueTurn+0x604>)
 800185a:	4618      	mov	r0, r3
 800185c:	4611      	mov	r1, r2
 800185e:	23bd      	movs	r3, #189	; 0xbd
 8001860:	461a      	mov	r2, r3
 8001862:	f002 fc6d 	bl	8004140 <memcpy>
				char TryAgain[] = "\r\n Now Try Again!!!";
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <continueTurn+0x608>)
 8001868:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800186c:	461d      	mov	r5, r3
 800186e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, Error, sizeof(Error), Timeout);
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <continueTurn+0x5dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	1d39      	adds	r1, r7, #4
 800187c:	22bd      	movs	r2, #189	; 0xbd
 800187e:	4824      	ldr	r0, [pc, #144]	; (8001910 <continueTurn+0x5e0>)
 8001880:	f001 ff0f 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8001884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001888:	f000 fa56 	bl	8001d38 <HAL_Delay>
				HAL_UART_Transmit(&huart2, TryAgain, sizeof(TryAgain), Timeout);
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <continueTurn+0x5dc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001894:	2214      	movs	r2, #20
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <continueTurn+0x5e0>)
 8001898:	f001 ff03 	bl	80036a2 <HAL_UART_Transmit>
				HAL_Delay(1000);
 800189c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a0:	f000 fa4a 	bl	8001d38 <HAL_Delay>
				nextTurn();
 80018a4:	f7ff fc0a 	bl	80010bc <nextTurn>
 80018a8:	e028      	b.n	80018fc <continueTurn+0x5cc>
			}
		}
		else{
			char Error[] = "\r\n\r\n The word does not have this character for sure!!! \r\n Have you read the how to play guide? \r\n The word does not contain numbers!! \r\n The word contains only a-z";
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <continueTurn+0x60c>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	4611      	mov	r1, r2
 80018b2:	23a4      	movs	r3, #164	; 0xa4
 80018b4:	461a      	mov	r2, r3
 80018b6:	f002 fc43 	bl	8004140 <memcpy>
			char TryAgain[] = "\r\n Now Try Again!!!";
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <continueTurn+0x608>)
 80018bc:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80018c0:	461d      	mov	r5, r3
 80018c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, Error, sizeof(Error), Timeout);
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <continueTurn+0x5dc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1d39      	adds	r1, r7, #4
 80018d0:	22a4      	movs	r2, #164	; 0xa4
 80018d2:	480f      	ldr	r0, [pc, #60]	; (8001910 <continueTurn+0x5e0>)
 80018d4:	f001 fee5 	bl	80036a2 <HAL_UART_Transmit>
			HAL_Delay(1000);
 80018d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018dc:	f000 fa2c 	bl	8001d38 <HAL_Delay>
			HAL_UART_Transmit(&huart2, TryAgain, sizeof(TryAgain), Timeout);
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <continueTurn+0x5dc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80018e8:	2214      	movs	r2, #20
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <continueTurn+0x5e0>)
 80018ec:	f001 fed9 	bl	80036a2 <HAL_UART_Transmit>
			HAL_Delay(1000);
 80018f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f4:	f000 fa20 	bl	8001d38 <HAL_Delay>
			nextTurn();
 80018f8:	f7ff fbe0 	bl	80010bc <nextTurn>
 80018fc:	46c5      	mov	sp, r8
		}

	}
}
 80018fe:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001902:	46bd      	mov	sp, r7
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001908:	0800509c 	.word	0x0800509c
 800190c:	20000f64 	.word	0x20000f64
 8001910:	200011e0 	.word	0x200011e0
 8001914:	20000f68 	.word	0x20000f68
 8001918:	080050e8 	.word	0x080050e8
 800191c:	20001170 	.word	0x20001170
 8001920:	20001220 	.word	0x20001220
 8001924:	08004ea4 	.word	0x08004ea4
 8001928:	08004ea0 	.word	0x08004ea0
 800192c:	20001184 	.word	0x20001184
 8001930:	08004e9c 	.word	0x08004e9c
 8001934:	08005154 	.word	0x08005154
 8001938:	08005214 	.word	0x08005214
 800193c:	08005228 	.word	0x08005228

08001940 <tryAgain>:

void tryAgain(){
 8001940:	b580      	push	{r7, lr}
 8001942:	b0aa      	sub	sp, #168	; 0xa8
 8001944:	af00      	add	r7, sp, #0
	char question[] = "\r\n \r\n Do you want to try again? \r\n Type y if yes \r\n Type n if no \r\n : ";
 8001946:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <tryAgain+0x98>)
 8001948:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800194c:	4611      	mov	r1, r2
 800194e:	2247      	movs	r2, #71	; 0x47
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fbf5 	bl	8004140 <memcpy>
	HAL_UART_Transmit(&huart2, question, sizeof(question), Timeout);
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <tryAgain+0x9c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800195e:	2247      	movs	r2, #71	; 0x47
 8001960:	481f      	ldr	r0, [pc, #124]	; (80019e0 <tryAgain+0xa0>)
 8001962:	f001 fe9e 	bl	80036a2 <HAL_UART_Transmit>
	if (HAL_UART_Receive(&huart2, pData, 1, Timeout) == HAL_OK){
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <tryAgain+0x9c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2201      	movs	r2, #1
 800196c:	491d      	ldr	r1, [pc, #116]	; (80019e4 <tryAgain+0xa4>)
 800196e:	481c      	ldr	r0, [pc, #112]	; (80019e0 <tryAgain+0xa0>)
 8001970:	f001 ff30 	bl	80037d4 <HAL_UART_Receive>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d12a      	bne.n	80019d0 <tryAgain+0x90>
		if (pData[0] == 'y'){
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <tryAgain+0xa4>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b79      	cmp	r3, #121	; 0x79
 8001980:	d104      	bne.n	800198c <tryAgain+0x4c>
			resetValues();
 8001982:	f7fe fdfd 	bl	8000580 <resetValues>
			startGame();
 8001986:	f7ff f8a1 	bl	8000acc <startGame>
			char Error[] = "\r\n How strange a man are you!! Type only y and n [y for yes and n for no] \r\n Now try again... ";
			HAL_UART_Transmit(&huart2, Error, sizeof(Error), Timeout);
			HAL_Delay(1000);
		}
	}
}
 800198a:	e021      	b.n	80019d0 <tryAgain+0x90>
		else if (pData[0] == 'n'){
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <tryAgain+0xa4>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b6e      	cmp	r3, #110	; 0x6e
 8001992:	d10b      	bne.n	80019ac <tryAgain+0x6c>
			HAL_UART_Transmit(&huart2, "\r\n\r\n ", 9, Timeout);
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <tryAgain+0x9c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2209      	movs	r2, #9
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <tryAgain+0xa8>)
 800199c:	4810      	ldr	r0, [pc, #64]	; (80019e0 <tryAgain+0xa0>)
 800199e:	f001 fe80 	bl	80036a2 <HAL_UART_Transmit>
			resetValues();
 80019a2:	f7fe fded 	bl	8000580 <resetValues>
			buttonPushStart();
 80019a6:	f7ff f925 	bl	8000bf4 <buttonPushStart>
}
 80019aa:	e011      	b.n	80019d0 <tryAgain+0x90>
			char Error[] = "\r\n How strange a man are you!! Type only y and n [y for yes and n for no] \r\n Now try again... ";
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <tryAgain+0xac>)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4611      	mov	r1, r2
 80019b2:	225f      	movs	r2, #95	; 0x5f
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fbc3 	bl	8004140 <memcpy>
			HAL_UART_Transmit(&huart2, Error, sizeof(Error), Timeout);
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <tryAgain+0x9c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4639      	mov	r1, r7
 80019c0:	225f      	movs	r2, #95	; 0x5f
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <tryAgain+0xa0>)
 80019c4:	f001 fe6d 	bl	80036a2 <HAL_UART_Transmit>
			HAL_Delay(1000);
 80019c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019cc:	f000 f9b4 	bl	8001d38 <HAL_Delay>
}
 80019d0:	bf00      	nop
 80019d2:	37a8      	adds	r7, #168	; 0xa8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	080052d4 	.word	0x080052d4
 80019dc:	20000f64 	.word	0x20000f64
 80019e0:	200011e0 	.word	0x200011e0
 80019e4:	20001180 	.word	0x20001180
 80019e8:	080052cc 	.word	0x080052cc
 80019ec:	0800531c 	.word	0x0800531c

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a60:	d10d      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_UART_MspInit+0x84>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d12b      	bne.n	8001b0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aea:	230c      	movs	r3, #12
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afa:	2307      	movs	r3, #7
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_UART_MspInit+0x8c>)
 8001b06:	f000 fa1f 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b74:	f000 f8c0 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x50>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x16>
		heap_end = &end;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <_sbrk+0x50>)
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <_sbrk+0x54>)
 8001b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <_sbrk+0x50>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <_sbrk+0x50>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	466a      	mov	r2, sp
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d907      	bls.n	8001bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ba6:	f002 fa81 	bl	80040ac <__errno>
 8001baa:	4602      	mov	r2, r0
 8001bac:	230c      	movs	r3, #12
 8001bae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e006      	b.n	8001bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <_sbrk+0x50>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <_sbrk+0x50>)
 8001bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20001174 	.word	0x20001174
 8001bd0:	20001248 	.word	0x20001248

08001bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <SystemInit+0x28>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <SystemInit+0x28>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SystemInit+0x28>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bee:	609a      	str	r2, [r3, #8]
#endif
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c06:	e003      	b.n	8001c10 <LoopCopyDataInit>

08001c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c0e:	3104      	adds	r1, #4

08001c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c18:	d3f6      	bcc.n	8001c08 <CopyDataInit>
  ldr  r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c1c:	e002      	b.n	8001c24 <LoopFillZerobss>

08001c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c20:	f842 3b04 	str.w	r3, [r2], #4

08001c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c28:	d3f9      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff ffd3 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f002 fa43 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7fe fce3 	bl	80005fc <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c3c:	080054e4 	.word	0x080054e4
  ldr  r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c44:	20001148 	.word	0x20001148
  ldr  r2, =_sbss
 8001c48:	20001148 	.word	0x20001148
  ldr  r3, = _ebss
 8001c4c:	20001244 	.word	0x20001244

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f92f 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff feba 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f939 	bl	8001f2e <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 f90f 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000f6c 	.word	0x20000f6c
 8001cf0:	20000f74 	.word	0x20000f74
 8001cf4:	20000f70 	.word	0x20000f70

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000f74 	.word	0x20000f74
 8001d1c:	2000123c 	.word	0x2000123c

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000123c 	.word	0x2000123c

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff ffee 	bl	8001d20 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_Delay+0x40>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000f74 	.word	0x20000f74

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff47 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff5c 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffb0 	bl	8001e9c <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e159      	b.n	8002218 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8148 	bne.w	8002212 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d00b      	beq.n	8001fa2 <HAL_GPIO_Init+0x5a>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d130      	bne.n	8002004 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0201 	and.w	r2, r3, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0xfc>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a2 	beq.w	8002212 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b56      	ldr	r3, [pc, #344]	; (800222c <HAL_GPIO_Init+0x2e4>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a55      	ldr	r2, [pc, #340]	; (800222c <HAL_GPIO_Init+0x2e4>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_GPIO_Init+0x2e4>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a48      	ldr	r2, [pc, #288]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0x202>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a47      	ldr	r2, [pc, #284]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x1fe>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a46      	ldr	r2, [pc, #280]	; (800223c <HAL_GPIO_Init+0x2f4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a45      	ldr	r2, [pc, #276]	; (8002240 <HAL_GPIO_Init+0x2f8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x1f6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a44      	ldr	r2, [pc, #272]	; (8002244 <HAL_GPIO_Init+0x2fc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x1f2>
 8002136:	2304      	movs	r3, #4
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x204>
 800213a:	2307      	movs	r3, #7
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x204>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x204>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x204>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x204>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4934      	ldr	r1, [pc, #208]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x300>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218e:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b8:	4a23      	ldr	r2, [pc, #140]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_GPIO_Init+0x300>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f aea2 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	3724      	adds	r7, #36	; 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40023800 	.word	0x40023800
 8002230:	40013800 	.word	0x40013800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40021000 	.word	0x40021000
 8002248:	40013c00 	.word	0x40013c00

0800224c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e001      	b.n	800226e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002298:	e003      	b.n	80022a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	619a      	str	r2, [r3, #24]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e25b      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d075      	beq.n	80023ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ce:	4ba3      	ldr	r3, [pc, #652]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d00c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4ba0      	ldr	r3, [pc, #640]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d112      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b9d      	ldr	r3, [pc, #628]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b99      	ldr	r3, [pc, #612]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x108>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d157      	bne.n	80023b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e236      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x74>
 8002316:	4b91      	ldr	r3, [pc, #580]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a90      	ldr	r2, [pc, #576]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x98>
 800232e:	4b8b      	ldr	r3, [pc, #556]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a8a      	ldr	r2, [pc, #552]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a87      	ldr	r2, [pc, #540]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002348:	4b84      	ldr	r3, [pc, #528]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a83      	ldr	r2, [pc, #524]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b81      	ldr	r3, [pc, #516]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a80      	ldr	r2, [pc, #512]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fcda 	bl	8001d20 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fcd6 	bl	8001d20 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1fb      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b76      	ldr	r3, [pc, #472]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xc0>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fcc6 	bl	8001d20 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fcc2 	bl	8001d20 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1e7      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b6c      	ldr	r3, [pc, #432]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0xe8>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c6:	4b65      	ldr	r3, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b62      	ldr	r3, [pc, #392]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b5f      	ldr	r3, [pc, #380]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b5c      	ldr	r3, [pc, #368]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x152>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1bb      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4952      	ldr	r1, [pc, #328]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7ff fc7b 	bl	8001d20 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7ff fc77 	bl	8001d20 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e19c      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b46      	ldr	r3, [pc, #280]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4940      	ldr	r1, [pc, #256]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fc5a 	bl	8001d20 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7ff fc56 	bl	8001d20 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e17b      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d030      	beq.n	80024fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b30      	ldr	r3, [pc, #192]	; (8002564 <HAL_RCC_OscConfig+0x2b4>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff fc3a 	bl	8001d20 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff fc36 	bl	8001d20 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e15b      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x200>
 80024ce:	e015      	b.n	80024fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_OscConfig+0x2b4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fc23 	bl	8001d20 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff fc1f 	bl	8001d20 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e144      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a0 	beq.w	800264a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_RCC_OscConfig+0x2ac>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_OscConfig+0x2b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d121      	bne.n	800258a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_RCC_OscConfig+0x2b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_RCC_OscConfig+0x2b8>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7ff fbe5 	bl	8001d20 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e011      	b.n	800257e <HAL_RCC_OscConfig+0x2ce>
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	42470000 	.word	0x42470000
 8002564:	42470e80 	.word	0x42470e80
 8002568:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7ff fbd8 	bl	8001d20 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0fd      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_OscConfig+0x4d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d106      	bne.n	80025a0 <HAL_RCC_OscConfig+0x2f0>
 8002592:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a7c      	ldr	r2, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x32a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x312>
 80025a8:	4b77      	ldr	r3, [pc, #476]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a76      	ldr	r2, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	4b74      	ldr	r3, [pc, #464]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a73      	ldr	r2, [pc, #460]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x32a>
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a70      	ldr	r2, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	4b6e      	ldr	r3, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a6d      	ldr	r2, [pc, #436]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff fb9d 	bl	8001d20 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7ff fb99 	bl	8001d20 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0bc      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x33a>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7ff fb87 	bl	8001d20 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7ff fb83 	bl	8001d20 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0a6      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8092 	beq.w	8002778 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002654:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d05c      	beq.n	800271a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d141      	bne.n	80026ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x4dc>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fb57 	bl	8001d20 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002676:	f7ff fb53 	bl	8001d20 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e078      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	019b      	lsls	r3, r3, #6
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	4933      	ldr	r1, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fb2c 	bl	8001d20 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff fb28 	bl	8001d20 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04d      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x41c>
 80026ea:	e045      	b.n	8002778 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7ff fb15 	bl	8001d20 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7ff fb11 	bl	8001d20 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e036      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x44a>
 8002718:	e02e      	b.n	8002778 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e029      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_RCC_OscConfig+0x4d8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	429a      	cmp	r2, r3
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002754:	4293      	cmp	r3, r2
 8002756:	d10d      	bne.n	8002774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40007000 	.word	0x40007000
 8002788:	40023800 	.word	0x40023800
 800278c:	42470060 	.word	0x42470060

08002790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0cc      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d90c      	bls.n	80027cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b65      	ldr	r3, [pc, #404]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d044      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d119      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d003      	beq.n	800284e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284a:	2b03      	cmp	r3, #3
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b3f      	ldr	r3, [pc, #252]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e067      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4934      	ldr	r1, [pc, #208]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002880:	f7ff fa4e 	bl	8001d20 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7ff fa4a 	bl	8001d20 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e04f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d20c      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4601      	mov	r1, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f9ae 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00
 800294c:	40023800 	.word	0x40023800
 8002950:	0800537c 	.word	0x0800537c
 8002954:	20000f6c 	.word	0x20000f6c
 8002958:	20000f70 	.word	0x20000f70

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	2300      	movs	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d007      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x32>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d008      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x38>
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 80b4 	bne.w	8002af0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800298a:	60bb      	str	r3, [r7, #8]
       break;
 800298c:	e0b3      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002990:	60bb      	str	r3, [r7, #8]
      break;
 8002992:	e0b0      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800299c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d04a      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	f04f 0400 	mov.w	r4, #0
 80029b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	ea03 0501 	and.w	r5, r3, r1
 80029c0:	ea04 0602 	and.w	r6, r4, r2
 80029c4:	4629      	mov	r1, r5
 80029c6:	4632      	mov	r2, r6
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	0154      	lsls	r4, r2, #5
 80029d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029d6:	014b      	lsls	r3, r1, #5
 80029d8:	4619      	mov	r1, r3
 80029da:	4622      	mov	r2, r4
 80029dc:	1b49      	subs	r1, r1, r5
 80029de:	eb62 0206 	sbc.w	r2, r2, r6
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f04f 0400 	mov.w	r4, #0
 80029ea:	0194      	lsls	r4, r2, #6
 80029ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029f0:	018b      	lsls	r3, r1, #6
 80029f2:	1a5b      	subs	r3, r3, r1
 80029f4:	eb64 0402 	sbc.w	r4, r4, r2
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	00e2      	lsls	r2, r4, #3
 8002a02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a06:	00d9      	lsls	r1, r3, #3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	195b      	adds	r3, r3, r5
 8002a0e:	eb44 0406 	adc.w	r4, r4, r6
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	0262      	lsls	r2, r4, #9
 8002a1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a20:	0259      	lsls	r1, r3, #9
 8002a22:	460b      	mov	r3, r1
 8002a24:	4614      	mov	r4, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	4621      	mov	r1, r4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f04f 0400 	mov.w	r4, #0
 8002a30:	461a      	mov	r2, r3
 8002a32:	4623      	mov	r3, r4
 8002a34:	f7fd fc24 	bl	8000280 <__aeabi_uldivmod>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e049      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	f04f 0400 	mov.w	r4, #0
 8002a4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	ea03 0501 	and.w	r5, r3, r1
 8002a56:	ea04 0602 	and.w	r6, r4, r2
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	4632      	mov	r2, r6
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	0154      	lsls	r4, r2, #5
 8002a68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a6c:	014b      	lsls	r3, r1, #5
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4622      	mov	r2, r4
 8002a72:	1b49      	subs	r1, r1, r5
 8002a74:	eb62 0206 	sbc.w	r2, r2, r6
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	f04f 0400 	mov.w	r4, #0
 8002a80:	0194      	lsls	r4, r2, #6
 8002a82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	1a5b      	subs	r3, r3, r1
 8002a8a:	eb64 0402 	sbc.w	r4, r4, r2
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a9c:	00d9      	lsls	r1, r3, #3
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	195b      	adds	r3, r3, r5
 8002aa4:	eb44 0406 	adc.w	r4, r4, r6
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	02a2      	lsls	r2, r4, #10
 8002ab2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ab6:	0299      	lsls	r1, r3, #10
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4614      	mov	r4, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	4621      	mov	r1, r4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f04f 0400 	mov.w	r4, #0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4623      	mov	r3, r4
 8002aca:	f7fd fbd9 	bl	8000280 <__aeabi_uldivmod>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	60bb      	str	r3, [r7, #8]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002af2:	60bb      	str	r3, [r7, #8]
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	68bb      	ldr	r3, [r7, #8]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000f6c 	.word	0x20000f6c

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800538c 	.word	0x0800538c

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b50:	f7ff ffdc 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b54:	4601      	mov	r1, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0b5b      	lsrs	r3, r3, #13
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	0800538c 	.word	0x0800538c

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e01d      	b.n	8002bc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe ff58 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 f9ee 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e01d      	b.n	8002c18 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f815 	bl	8002c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 f9c3 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2201      	movs	r2, #1
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fc4a 	bl	80034e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_TIM_PWM_Start+0x60>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d107      	bne.n	8002c66 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d007      	beq.n	8002c88 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000

08002c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0b4      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	f200 809f 	bhi.w	8002e08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002d05 	.word	0x08002d05
 8002cd4:	08002e09 	.word	0x08002e09
 8002cd8:	08002e09 	.word	0x08002e09
 8002cdc:	08002e09 	.word	0x08002e09
 8002ce0:	08002d45 	.word	0x08002d45
 8002ce4:	08002e09 	.word	0x08002e09
 8002ce8:	08002e09 	.word	0x08002e09
 8002cec:	08002e09 	.word	0x08002e09
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002e09 	.word	0x08002e09
 8002cf8:	08002e09 	.word	0x08002e09
 8002cfc:	08002e09 	.word	0x08002e09
 8002d00:	08002dc7 	.word	0x08002dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f9c2 	bl	8003094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0208 	orr.w	r2, r2, #8
 8002d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0204 	bic.w	r2, r2, #4
 8002d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6999      	ldr	r1, [r3, #24]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	619a      	str	r2, [r3, #24]
      break;
 8002d42:	e062      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fa08 	bl	8003160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6999      	ldr	r1, [r3, #24]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	021a      	lsls	r2, r3, #8
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	619a      	str	r2, [r3, #24]
      break;
 8002d84:	e041      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fa53 	bl	8003238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0208 	orr.w	r2, r2, #8
 8002da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0204 	bic.w	r2, r2, #4
 8002db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69d9      	ldr	r1, [r3, #28]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	61da      	str	r2, [r3, #28]
      break;
 8002dc4:	e021      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fa9d 	bl	800330c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69d9      	ldr	r1, [r3, #28]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	61da      	str	r2, [r3, #28]
      break;
 8002e06:	e000      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_TIM_ConfigClockSource+0x18>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0a6      	b.n	8002f8a <HAL_TIM_ConfigClockSource+0x166>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d067      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0x120>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d80b      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x6c>
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d073      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x140>
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d802      	bhi.n	8002e86 <HAL_TIM_ConfigClockSource+0x62>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d06f      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e84:	e078      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d06c      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x140>
 8002e8a:	2b30      	cmp	r3, #48	; 0x30
 8002e8c:	d06a      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e8e:	e073      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e90:	2b70      	cmp	r3, #112	; 0x70
 8002e92:	d00d      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0x8c>
 8002e94:	2b70      	cmp	r3, #112	; 0x70
 8002e96:	d804      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x7e>
 8002e98:	2b50      	cmp	r3, #80	; 0x50
 8002e9a:	d033      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0xe0>
 8002e9c:	2b60      	cmp	r3, #96	; 0x60
 8002e9e:	d041      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ea0:	e06a      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	d066      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x152>
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d017      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002eae:	e063      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f000 faee 	bl	80034a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]
      break;
 8002edc:	e04c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6899      	ldr	r1, [r3, #8]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f000 fad7 	bl	80034a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f00:	609a      	str	r2, [r3, #8]
      break;
 8002f02:	e039      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f000 fa4b 	bl	80033ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2150      	movs	r1, #80	; 0x50
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 faa4 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f22:	e029      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f000 fa6a 	bl	800340a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2160      	movs	r1, #96	; 0x60
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa94 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f42:	e019      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f000 fa2b 	bl	80033ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa84 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f62:	e009      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fa7b 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f74:	e000      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <TIM_Base_SetConfig+0xe4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00f      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a31      	ldr	r2, [pc, #196]	; (800307c <TIM_Base_SetConfig+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a30      	ldr	r2, [pc, #192]	; (8003080 <TIM_Base_SetConfig+0xec>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <TIM_Base_SetConfig+0xf0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0xe4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01b      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d017      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <TIM_Base_SetConfig+0xe8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <TIM_Base_SetConfig+0xec>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <TIM_Base_SetConfig+0xf0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <TIM_Base_SetConfig+0xf4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <TIM_Base_SetConfig+0xf8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <TIM_Base_SetConfig+0xfc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <TIM_Base_SetConfig+0xe4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d103      	bne.n	8003064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	615a      	str	r2, [r3, #20]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800

08003094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0201 	bic.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0302 	bic.w	r3, r3, #2
 80030dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <TIM_OC1_SetConfig+0xc8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10c      	bne.n	800310a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0308 	bic.w	r3, r3, #8
 80030f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <TIM_OC1_SetConfig+0xc8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d111      	bne.n	8003136 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40010000 	.word	0x40010000

08003160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0210 	bic.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0320 	bic.w	r3, r3, #32
 80031aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <TIM_OC2_SetConfig+0xd4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10d      	bne.n	80031dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <TIM_OC2_SetConfig+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d113      	bne.n	800320c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40010000 	.word	0x40010000

08003238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <TIM_OC3_SetConfig+0xd0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <TIM_OC3_SetConfig+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d113      	bne.n	80032e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40010000 	.word	0x40010000

0800330c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	031b      	lsls	r3, r3, #12
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <TIM_OC4_SetConfig+0x9c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d109      	bne.n	8003380 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000

080033ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 030a 	bic.w	r3, r3, #10
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800340a:	b480      	push	{r7}
 800340c:	b087      	sub	sp, #28
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0210 	bic.w	r2, r3, #16
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	031b      	lsls	r3, r3, #12
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003446:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	f043 0307 	orr.w	r3, r3, #7
 800348c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2201      	movs	r2, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1a      	ldr	r2, [r3, #32]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003540:	2302      	movs	r3, #2
 8003542:	e050      	b.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d013      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a13      	ldr	r2, [pc, #76]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10c      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40014000 	.word	0x40014000

08003608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe fa2e 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f9b1 	bl	80039b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b088      	sub	sp, #32
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b20      	cmp	r3, #32
 80036c0:	f040 8083 	bne.w	80037ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Transmit+0x2e>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e07b      	b.n	80037cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Transmit+0x40>
 80036de:	2302      	movs	r3, #2
 80036e0:	e074      	b.n	80037cc <HAL_UART_Transmit+0x12a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2221      	movs	r2, #33	; 0x21
 80036f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fb12 	bl	8001d20 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003712:	e042      	b.n	800379a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d122      	bne.n	8003772 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2200      	movs	r2, #0
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8f2 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e042      	b.n	80037cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3302      	adds	r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	e017      	b.n	800379a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3301      	adds	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	e013      	b.n	800379a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2200      	movs	r2, #0
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f8cf 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e01f      	b.n	80037cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	60ba      	str	r2, [r7, #8]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1b7      	bne.n	8003714 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f8b6 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e006      	b.n	80037cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 8090 	bne.w	8003916 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_UART_Receive+0x2e>
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e088      	b.n	8003918 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UART_Receive+0x40>
 8003810:	2302      	movs	r3, #2
 8003812:	e081      	b.n	8003918 <HAL_UART_Receive+0x144>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	; 0x22
 8003826:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800382a:	f7fe fa79 	bl	8001d20 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003844:	e05c      	b.n	8003900 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385c:	d12b      	bne.n	80038b6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2120      	movs	r1, #32
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f859 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e04f      	b.n	8003918 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10c      	bne.n	800389e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003890:	b29a      	uxth	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3302      	adds	r3, #2
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e030      	b.n	8003900 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	e024      	b.n	8003900 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2120      	movs	r1, #32
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f82d 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e023      	b.n	8003918 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	60ba      	str	r2, [r7, #8]
 80038e4:	b2ca      	uxtb	r2, r1
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e00a      	b.n	8003900 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d19d      	bne.n	8003846 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003930:	e02c      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d028      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x30>
 8003940:	f7fe f9ee 	bl	8001d20 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	429a      	cmp	r2, r3
 800394e:	d21d      	bcs.n	800398c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800395e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e00f      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d0c3      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039f6:	f023 030c 	bic.w	r3, r3, #12
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a22:	f040 818b 	bne.w	8003d3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4ac1      	ldr	r2, [pc, #772]	; (8003d30 <UART_SetConfig+0x37c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d005      	beq.n	8003a3c <UART_SetConfig+0x88>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4abf      	ldr	r2, [pc, #764]	; (8003d34 <UART_SetConfig+0x380>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	f040 80bd 	bne.w	8003bb6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7ff f886 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003a40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	461d      	mov	r5, r3
 8003a46:	f04f 0600 	mov.w	r6, #0
 8003a4a:	46a8      	mov	r8, r5
 8003a4c:	46b1      	mov	r9, r6
 8003a4e:	eb18 0308 	adds.w	r3, r8, r8
 8003a52:	eb49 0409 	adc.w	r4, r9, r9
 8003a56:	4698      	mov	r8, r3
 8003a58:	46a1      	mov	r9, r4
 8003a5a:	eb18 0805 	adds.w	r8, r8, r5
 8003a5e:	eb49 0906 	adc.w	r9, r9, r6
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a76:	4688      	mov	r8, r1
 8003a78:	4691      	mov	r9, r2
 8003a7a:	eb18 0005 	adds.w	r0, r8, r5
 8003a7e:	eb49 0106 	adc.w	r1, r9, r6
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	461d      	mov	r5, r3
 8003a88:	f04f 0600 	mov.w	r6, #0
 8003a8c:	196b      	adds	r3, r5, r5
 8003a8e:	eb46 0406 	adc.w	r4, r6, r6
 8003a92:	461a      	mov	r2, r3
 8003a94:	4623      	mov	r3, r4
 8003a96:	f7fc fbf3 	bl	8000280 <__aeabi_uldivmod>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4ba5      	ldr	r3, [pc, #660]	; (8003d38 <UART_SetConfig+0x384>)
 8003aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	461d      	mov	r5, r3
 8003ab0:	f04f 0600 	mov.w	r6, #0
 8003ab4:	46a9      	mov	r9, r5
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	eb19 0309 	adds.w	r3, r9, r9
 8003abc:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	46a2      	mov	sl, r4
 8003ac4:	eb19 0905 	adds.w	r9, r9, r5
 8003ac8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003adc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae0:	4689      	mov	r9, r1
 8003ae2:	4692      	mov	sl, r2
 8003ae4:	eb19 0005 	adds.w	r0, r9, r5
 8003ae8:	eb4a 0106 	adc.w	r1, sl, r6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461d      	mov	r5, r3
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	196b      	adds	r3, r5, r5
 8003af8:	eb46 0406 	adc.w	r4, r6, r6
 8003afc:	461a      	mov	r2, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	f7fc fbbe 	bl	8000280 <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b8b      	ldr	r3, [pc, #556]	; (8003d38 <UART_SetConfig+0x384>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a86      	ldr	r2, [pc, #536]	; (8003d38 <UART_SetConfig+0x384>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b2c:	4498      	add	r8, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	461d      	mov	r5, r3
 8003b32:	f04f 0600 	mov.w	r6, #0
 8003b36:	46a9      	mov	r9, r5
 8003b38:	46b2      	mov	sl, r6
 8003b3a:	eb19 0309 	adds.w	r3, r9, r9
 8003b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b42:	4699      	mov	r9, r3
 8003b44:	46a2      	mov	sl, r4
 8003b46:	eb19 0905 	adds.w	r9, r9, r5
 8003b4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b62:	4689      	mov	r9, r1
 8003b64:	4692      	mov	sl, r2
 8003b66:	eb19 0005 	adds.w	r0, r9, r5
 8003b6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	461d      	mov	r5, r3
 8003b74:	f04f 0600 	mov.w	r6, #0
 8003b78:	196b      	adds	r3, r5, r5
 8003b7a:	eb46 0406 	adc.w	r4, r6, r6
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	f7fc fb7d 	bl	8000280 <__aeabi_uldivmod>
 8003b86:	4603      	mov	r3, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <UART_SetConfig+0x384>)
 8003b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2164      	movs	r1, #100	; 0x64
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	3332      	adds	r3, #50	; 0x32
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <UART_SetConfig+0x384>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 0207 	and.w	r2, r3, #7
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4442      	add	r2, r8
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	e26f      	b.n	8004096 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb6:	f7fe ffb5 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003bba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	f04f 0600 	mov.w	r6, #0
 8003bc4:	46a8      	mov	r8, r5
 8003bc6:	46b1      	mov	r9, r6
 8003bc8:	eb18 0308 	adds.w	r3, r8, r8
 8003bcc:	eb49 0409 	adc.w	r4, r9, r9
 8003bd0:	4698      	mov	r8, r3
 8003bd2:	46a1      	mov	r9, r4
 8003bd4:	eb18 0805 	adds.w	r8, r8, r5
 8003bd8:	eb49 0906 	adc.w	r9, r9, r6
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003be8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bf0:	4688      	mov	r8, r1
 8003bf2:	4691      	mov	r9, r2
 8003bf4:	eb18 0005 	adds.w	r0, r8, r5
 8003bf8:	eb49 0106 	adc.w	r1, r9, r6
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	461d      	mov	r5, r3
 8003c02:	f04f 0600 	mov.w	r6, #0
 8003c06:	196b      	adds	r3, r5, r5
 8003c08:	eb46 0406 	adc.w	r4, r6, r6
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	f7fc fb36 	bl	8000280 <__aeabi_uldivmod>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <UART_SetConfig+0x384>)
 8003c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	461d      	mov	r5, r3
 8003c2a:	f04f 0600 	mov.w	r6, #0
 8003c2e:	46a9      	mov	r9, r5
 8003c30:	46b2      	mov	sl, r6
 8003c32:	eb19 0309 	adds.w	r3, r9, r9
 8003c36:	eb4a 040a 	adc.w	r4, sl, sl
 8003c3a:	4699      	mov	r9, r3
 8003c3c:	46a2      	mov	sl, r4
 8003c3e:	eb19 0905 	adds.w	r9, r9, r5
 8003c42:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c5a:	4689      	mov	r9, r1
 8003c5c:	4692      	mov	sl, r2
 8003c5e:	eb19 0005 	adds.w	r0, r9, r5
 8003c62:	eb4a 0106 	adc.w	r1, sl, r6
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	f04f 0600 	mov.w	r6, #0
 8003c70:	196b      	adds	r3, r5, r5
 8003c72:	eb46 0406 	adc.w	r4, r6, r6
 8003c76:	461a      	mov	r2, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	f7fc fb01 	bl	8000280 <__aeabi_uldivmod>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <UART_SetConfig+0x384>)
 8003c86:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2164      	movs	r1, #100	; 0x64
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <UART_SetConfig+0x384>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca6:	4498      	add	r8, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	461d      	mov	r5, r3
 8003cac:	f04f 0600 	mov.w	r6, #0
 8003cb0:	46a9      	mov	r9, r5
 8003cb2:	46b2      	mov	sl, r6
 8003cb4:	eb19 0309 	adds.w	r3, r9, r9
 8003cb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	46a2      	mov	sl, r4
 8003cc0:	eb19 0905 	adds.w	r9, r9, r5
 8003cc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cdc:	4689      	mov	r9, r1
 8003cde:	4692      	mov	sl, r2
 8003ce0:	eb19 0005 	adds.w	r0, r9, r5
 8003ce4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	461d      	mov	r5, r3
 8003cee:	f04f 0600 	mov.w	r6, #0
 8003cf2:	196b      	adds	r3, r5, r5
 8003cf4:	eb46 0406 	adc.w	r4, r6, r6
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	f7fc fac0 	bl	8000280 <__aeabi_uldivmod>
 8003d00:	4603      	mov	r3, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <UART_SetConfig+0x384>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <UART_SetConfig+0x384>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4442      	add	r2, r8
 8003d2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d2e:	e1b2      	b.n	8004096 <UART_SetConfig+0x6e2>
 8003d30:	40011000 	.word	0x40011000
 8003d34:	40011400 	.word	0x40011400
 8003d38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4ad7      	ldr	r2, [pc, #860]	; (80040a0 <UART_SetConfig+0x6ec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d005      	beq.n	8003d52 <UART_SetConfig+0x39e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4ad6      	ldr	r2, [pc, #856]	; (80040a4 <UART_SetConfig+0x6f0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f040 80d1 	bne.w	8003ef4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d52:	f7fe fefb 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003d56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	469a      	mov	sl, r3
 8003d5c:	f04f 0b00 	mov.w	fp, #0
 8003d60:	46d0      	mov	r8, sl
 8003d62:	46d9      	mov	r9, fp
 8003d64:	eb18 0308 	adds.w	r3, r8, r8
 8003d68:	eb49 0409 	adc.w	r4, r9, r9
 8003d6c:	4698      	mov	r8, r3
 8003d6e:	46a1      	mov	r9, r4
 8003d70:	eb18 080a 	adds.w	r8, r8, sl
 8003d74:	eb49 090b 	adc.w	r9, r9, fp
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d8c:	4688      	mov	r8, r1
 8003d8e:	4691      	mov	r9, r2
 8003d90:	eb1a 0508 	adds.w	r5, sl, r8
 8003d94:	eb4b 0609 	adc.w	r6, fp, r9
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0094      	lsls	r4, r2, #2
 8003dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003db0:	008b      	lsls	r3, r1, #2
 8003db2:	461a      	mov	r2, r3
 8003db4:	4623      	mov	r3, r4
 8003db6:	4628      	mov	r0, r5
 8003db8:	4631      	mov	r1, r6
 8003dba:	f7fc fa61 	bl	8000280 <__aeabi_uldivmod>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4bb8      	ldr	r3, [pc, #736]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	469b      	mov	fp, r3
 8003dd4:	f04f 0c00 	mov.w	ip, #0
 8003dd8:	46d9      	mov	r9, fp
 8003dda:	46e2      	mov	sl, ip
 8003ddc:	eb19 0309 	adds.w	r3, r9, r9
 8003de0:	eb4a 040a 	adc.w	r4, sl, sl
 8003de4:	4699      	mov	r9, r3
 8003de6:	46a2      	mov	sl, r4
 8003de8:	eb19 090b 	adds.w	r9, r9, fp
 8003dec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e04:	4689      	mov	r9, r1
 8003e06:	4692      	mov	sl, r2
 8003e08:	eb1b 0509 	adds.w	r5, fp, r9
 8003e0c:	eb4c 060a 	adc.w	r6, ip, sl
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4619      	mov	r1, r3
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	f04f 0400 	mov.w	r4, #0
 8003e22:	0094      	lsls	r4, r2, #2
 8003e24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e28:	008b      	lsls	r3, r1, #2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	4631      	mov	r1, r6
 8003e32:	f7fc fa25 	bl	8000280 <__aeabi_uldivmod>
 8003e36:	4603      	mov	r3, r0
 8003e38:	460c      	mov	r4, r1
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b9a      	ldr	r3, [pc, #616]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2164      	movs	r1, #100	; 0x64
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a95      	ldr	r2, [pc, #596]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	4498      	add	r8, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	469b      	mov	fp, r3
 8003e62:	f04f 0c00 	mov.w	ip, #0
 8003e66:	46d9      	mov	r9, fp
 8003e68:	46e2      	mov	sl, ip
 8003e6a:	eb19 0309 	adds.w	r3, r9, r9
 8003e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e72:	4699      	mov	r9, r3
 8003e74:	46a2      	mov	sl, r4
 8003e76:	eb19 090b 	adds.w	r9, r9, fp
 8003e7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e92:	4689      	mov	r9, r1
 8003e94:	4692      	mov	sl, r2
 8003e96:	eb1b 0509 	adds.w	r5, fp, r9
 8003e9a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	f04f 0400 	mov.w	r4, #0
 8003eb0:	0094      	lsls	r4, r2, #2
 8003eb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb6:	008b      	lsls	r3, r1, #2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4623      	mov	r3, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	f7fc f9de 	bl	8000280 <__aeabi_uldivmod>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b77      	ldr	r3, [pc, #476]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4442      	add	r2, r8
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	e0d0      	b.n	8004096 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe fe16 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	469a      	mov	sl, r3
 8003efe:	f04f 0b00 	mov.w	fp, #0
 8003f02:	46d0      	mov	r8, sl
 8003f04:	46d9      	mov	r9, fp
 8003f06:	eb18 0308 	adds.w	r3, r8, r8
 8003f0a:	eb49 0409 	adc.w	r4, r9, r9
 8003f0e:	4698      	mov	r8, r3
 8003f10:	46a1      	mov	r9, r4
 8003f12:	eb18 080a 	adds.w	r8, r8, sl
 8003f16:	eb49 090b 	adc.w	r9, r9, fp
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f2e:	4688      	mov	r8, r1
 8003f30:	4691      	mov	r9, r2
 8003f32:	eb1a 0508 	adds.w	r5, sl, r8
 8003f36:	eb4b 0609 	adc.w	r6, fp, r9
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	0094      	lsls	r4, r2, #2
 8003f4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f52:	008b      	lsls	r3, r1, #2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	f7fc f990 	bl	8000280 <__aeabi_uldivmod>
 8003f60:	4603      	mov	r3, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003f68:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	469b      	mov	fp, r3
 8003f76:	f04f 0c00 	mov.w	ip, #0
 8003f7a:	46d9      	mov	r9, fp
 8003f7c:	46e2      	mov	sl, ip
 8003f7e:	eb19 0309 	adds.w	r3, r9, r9
 8003f82:	eb4a 040a 	adc.w	r4, sl, sl
 8003f86:	4699      	mov	r9, r3
 8003f88:	46a2      	mov	sl, r4
 8003f8a:	eb19 090b 	adds.w	r9, r9, fp
 8003f8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa6:	4689      	mov	r9, r1
 8003fa8:	4692      	mov	sl, r2
 8003faa:	eb1b 0509 	adds.w	r5, fp, r9
 8003fae:	eb4c 060a 	adc.w	r6, ip, sl
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	f04f 0400 	mov.w	r4, #0
 8003fc4:	0094      	lsls	r4, r2, #2
 8003fc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	f7fc f954 	bl	8000280 <__aeabi_uldivmod>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	4498      	add	r8, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	469b      	mov	fp, r3
 8004004:	f04f 0c00 	mov.w	ip, #0
 8004008:	46d9      	mov	r9, fp
 800400a:	46e2      	mov	sl, ip
 800400c:	eb19 0309 	adds.w	r3, r9, r9
 8004010:	eb4a 040a 	adc.w	r4, sl, sl
 8004014:	4699      	mov	r9, r3
 8004016:	46a2      	mov	sl, r4
 8004018:	eb19 090b 	adds.w	r9, r9, fp
 800401c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800402c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004034:	4689      	mov	r9, r1
 8004036:	4692      	mov	sl, r2
 8004038:	eb1b 0509 	adds.w	r5, fp, r9
 800403c:	eb4c 060a 	adc.w	r6, ip, sl
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4619      	mov	r1, r3
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	f04f 0400 	mov.w	r4, #0
 8004052:	0094      	lsls	r4, r2, #2
 8004054:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004058:	008b      	lsls	r3, r1, #2
 800405a:	461a      	mov	r2, r3
 800405c:	4623      	mov	r3, r4
 800405e:	4628      	mov	r0, r5
 8004060:	4631      	mov	r1, r6
 8004062:	f7fc f90d 	bl	8000280 <__aeabi_uldivmod>
 8004066:	4603      	mov	r3, r0
 8004068:	460c      	mov	r4, r1
 800406a:	461a      	mov	r2, r3
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <UART_SetConfig+0x6f4>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2164      	movs	r1, #100	; 0x64
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <UART_SetConfig+0x6f4>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4442      	add	r2, r8
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	e7ff      	b.n	8004096 <UART_SetConfig+0x6e2>
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a0:	40011000 	.word	0x40011000
 80040a4:	40011400 	.word	0x40011400
 80040a8:	51eb851f 	.word	0x51eb851f

080040ac <__errno>:
 80040ac:	4b01      	ldr	r3, [pc, #4]	; (80040b4 <__errno+0x8>)
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000f78 	.word	0x20000f78

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4e0d      	ldr	r6, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1ba4      	subs	r4, r4, r6
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2500      	movs	r5, #0
 80040c4:	42a5      	cmp	r5, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4e0b      	ldr	r6, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 fc56 	bl	800497c <_init>
 80040d0:	1ba4      	subs	r4, r4, r6
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2500      	movs	r5, #0
 80040d6:	42a5      	cmp	r5, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e0:	4798      	blx	r3
 80040e2:	3501      	adds	r5, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ea:	4798      	blx	r3
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	080054dc 	.word	0x080054dc
 80040f4:	080054dc 	.word	0x080054dc
 80040f8:	080054dc 	.word	0x080054dc
 80040fc:	080054e0 	.word	0x080054e0

08004100 <__locale_ctype_ptr>:
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <__locale_ctype_ptr+0x14>)
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <__locale_ctype_ptr+0x18>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf08      	it	eq
 800410c:	4613      	moveq	r3, r2
 800410e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004112:	4770      	bx	lr
 8004114:	20000f78 	.word	0x20000f78
 8004118:	20000fdc 	.word	0x20000fdc

0800411c <__ascii_mbtowc>:
 800411c:	b082      	sub	sp, #8
 800411e:	b901      	cbnz	r1, 8004122 <__ascii_mbtowc+0x6>
 8004120:	a901      	add	r1, sp, #4
 8004122:	b142      	cbz	r2, 8004136 <__ascii_mbtowc+0x1a>
 8004124:	b14b      	cbz	r3, 800413a <__ascii_mbtowc+0x1e>
 8004126:	7813      	ldrb	r3, [r2, #0]
 8004128:	600b      	str	r3, [r1, #0]
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	1c10      	adds	r0, r2, #0
 800412e:	bf18      	it	ne
 8004130:	2001      	movne	r0, #1
 8004132:	b002      	add	sp, #8
 8004134:	4770      	bx	lr
 8004136:	4610      	mov	r0, r2
 8004138:	e7fb      	b.n	8004132 <__ascii_mbtowc+0x16>
 800413a:	f06f 0001 	mvn.w	r0, #1
 800413e:	e7f8      	b.n	8004132 <__ascii_mbtowc+0x16>

08004140 <memcpy>:
 8004140:	b510      	push	{r4, lr}
 8004142:	1e43      	subs	r3, r0, #1
 8004144:	440a      	add	r2, r1
 8004146:	4291      	cmp	r1, r2
 8004148:	d100      	bne.n	800414c <memcpy+0xc>
 800414a:	bd10      	pop	{r4, pc}
 800414c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004154:	e7f7      	b.n	8004146 <memcpy+0x6>

08004156 <memset>:
 8004156:	4402      	add	r2, r0
 8004158:	4603      	mov	r3, r0
 800415a:	4293      	cmp	r3, r2
 800415c:	d100      	bne.n	8004160 <memset+0xa>
 800415e:	4770      	bx	lr
 8004160:	f803 1b01 	strb.w	r1, [r3], #1
 8004164:	e7f9      	b.n	800415a <memset+0x4>
	...

08004168 <siprintf>:
 8004168:	b40e      	push	{r1, r2, r3}
 800416a:	b500      	push	{lr}
 800416c:	b09c      	sub	sp, #112	; 0x70
 800416e:	ab1d      	add	r3, sp, #116	; 0x74
 8004170:	9002      	str	r0, [sp, #8]
 8004172:	9006      	str	r0, [sp, #24]
 8004174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004178:	4809      	ldr	r0, [pc, #36]	; (80041a0 <siprintf+0x38>)
 800417a:	9107      	str	r1, [sp, #28]
 800417c:	9104      	str	r1, [sp, #16]
 800417e:	4909      	ldr	r1, [pc, #36]	; (80041a4 <siprintf+0x3c>)
 8004180:	f853 2b04 	ldr.w	r2, [r3], #4
 8004184:	9105      	str	r1, [sp, #20]
 8004186:	6800      	ldr	r0, [r0, #0]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	a902      	add	r1, sp, #8
 800418c:	f000 f874 	bl	8004278 <_svfiprintf_r>
 8004190:	9b02      	ldr	r3, [sp, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	b01c      	add	sp, #112	; 0x70
 8004198:	f85d eb04 	ldr.w	lr, [sp], #4
 800419c:	b003      	add	sp, #12
 800419e:	4770      	bx	lr
 80041a0:	20000f78 	.word	0x20000f78
 80041a4:	ffff0208 	.word	0xffff0208

080041a8 <__ascii_wctomb>:
 80041a8:	b149      	cbz	r1, 80041be <__ascii_wctomb+0x16>
 80041aa:	2aff      	cmp	r2, #255	; 0xff
 80041ac:	bf85      	ittet	hi
 80041ae:	238a      	movhi	r3, #138	; 0x8a
 80041b0:	6003      	strhi	r3, [r0, #0]
 80041b2:	700a      	strbls	r2, [r1, #0]
 80041b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80041b8:	bf98      	it	ls
 80041ba:	2001      	movls	r0, #1
 80041bc:	4770      	bx	lr
 80041be:	4608      	mov	r0, r1
 80041c0:	4770      	bx	lr

080041c2 <__ssputs_r>:
 80041c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c6:	688e      	ldr	r6, [r1, #8]
 80041c8:	429e      	cmp	r6, r3
 80041ca:	4682      	mov	sl, r0
 80041cc:	460c      	mov	r4, r1
 80041ce:	4690      	mov	r8, r2
 80041d0:	4699      	mov	r9, r3
 80041d2:	d837      	bhi.n	8004244 <__ssputs_r+0x82>
 80041d4:	898a      	ldrh	r2, [r1, #12]
 80041d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041da:	d031      	beq.n	8004240 <__ssputs_r+0x7e>
 80041dc:	6825      	ldr	r5, [r4, #0]
 80041de:	6909      	ldr	r1, [r1, #16]
 80041e0:	1a6f      	subs	r7, r5, r1
 80041e2:	6965      	ldr	r5, [r4, #20]
 80041e4:	2302      	movs	r3, #2
 80041e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ea:	fb95 f5f3 	sdiv	r5, r5, r3
 80041ee:	f109 0301 	add.w	r3, r9, #1
 80041f2:	443b      	add	r3, r7
 80041f4:	429d      	cmp	r5, r3
 80041f6:	bf38      	it	cc
 80041f8:	461d      	movcc	r5, r3
 80041fa:	0553      	lsls	r3, r2, #21
 80041fc:	d530      	bpl.n	8004260 <__ssputs_r+0x9e>
 80041fe:	4629      	mov	r1, r5
 8004200:	f000 fb22 	bl	8004848 <_malloc_r>
 8004204:	4606      	mov	r6, r0
 8004206:	b950      	cbnz	r0, 800421e <__ssputs_r+0x5c>
 8004208:	230c      	movs	r3, #12
 800420a:	f8ca 3000 	str.w	r3, [sl]
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004214:	81a3      	strh	r3, [r4, #12]
 8004216:	f04f 30ff 	mov.w	r0, #4294967295
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	463a      	mov	r2, r7
 8004220:	6921      	ldr	r1, [r4, #16]
 8004222:	f7ff ff8d 	bl	8004140 <memcpy>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	6126      	str	r6, [r4, #16]
 8004234:	6165      	str	r5, [r4, #20]
 8004236:	443e      	add	r6, r7
 8004238:	1bed      	subs	r5, r5, r7
 800423a:	6026      	str	r6, [r4, #0]
 800423c:	60a5      	str	r5, [r4, #8]
 800423e:	464e      	mov	r6, r9
 8004240:	454e      	cmp	r6, r9
 8004242:	d900      	bls.n	8004246 <__ssputs_r+0x84>
 8004244:	464e      	mov	r6, r9
 8004246:	4632      	mov	r2, r6
 8004248:	4641      	mov	r1, r8
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	f000 fa94 	bl	8004778 <memmove>
 8004250:	68a3      	ldr	r3, [r4, #8]
 8004252:	1b9b      	subs	r3, r3, r6
 8004254:	60a3      	str	r3, [r4, #8]
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	441e      	add	r6, r3
 800425a:	6026      	str	r6, [r4, #0]
 800425c:	2000      	movs	r0, #0
 800425e:	e7dc      	b.n	800421a <__ssputs_r+0x58>
 8004260:	462a      	mov	r2, r5
 8004262:	f000 fb4b 	bl	80048fc <_realloc_r>
 8004266:	4606      	mov	r6, r0
 8004268:	2800      	cmp	r0, #0
 800426a:	d1e2      	bne.n	8004232 <__ssputs_r+0x70>
 800426c:	6921      	ldr	r1, [r4, #16]
 800426e:	4650      	mov	r0, sl
 8004270:	f000 fa9c 	bl	80047ac <_free_r>
 8004274:	e7c8      	b.n	8004208 <__ssputs_r+0x46>
	...

08004278 <_svfiprintf_r>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	461d      	mov	r5, r3
 800427e:	898b      	ldrh	r3, [r1, #12]
 8004280:	061f      	lsls	r7, r3, #24
 8004282:	b09d      	sub	sp, #116	; 0x74
 8004284:	4680      	mov	r8, r0
 8004286:	460c      	mov	r4, r1
 8004288:	4616      	mov	r6, r2
 800428a:	d50f      	bpl.n	80042ac <_svfiprintf_r+0x34>
 800428c:	690b      	ldr	r3, [r1, #16]
 800428e:	b96b      	cbnz	r3, 80042ac <_svfiprintf_r+0x34>
 8004290:	2140      	movs	r1, #64	; 0x40
 8004292:	f000 fad9 	bl	8004848 <_malloc_r>
 8004296:	6020      	str	r0, [r4, #0]
 8004298:	6120      	str	r0, [r4, #16]
 800429a:	b928      	cbnz	r0, 80042a8 <_svfiprintf_r+0x30>
 800429c:	230c      	movs	r3, #12
 800429e:	f8c8 3000 	str.w	r3, [r8]
 80042a2:	f04f 30ff 	mov.w	r0, #4294967295
 80042a6:	e0c8      	b.n	800443a <_svfiprintf_r+0x1c2>
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	6163      	str	r3, [r4, #20]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9309      	str	r3, [sp, #36]	; 0x24
 80042b0:	2320      	movs	r3, #32
 80042b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042b6:	2330      	movs	r3, #48	; 0x30
 80042b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042bc:	9503      	str	r5, [sp, #12]
 80042be:	f04f 0b01 	mov.w	fp, #1
 80042c2:	4637      	mov	r7, r6
 80042c4:	463d      	mov	r5, r7
 80042c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80042ca:	b10b      	cbz	r3, 80042d0 <_svfiprintf_r+0x58>
 80042cc:	2b25      	cmp	r3, #37	; 0x25
 80042ce:	d13e      	bne.n	800434e <_svfiprintf_r+0xd6>
 80042d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80042d4:	d00b      	beq.n	80042ee <_svfiprintf_r+0x76>
 80042d6:	4653      	mov	r3, sl
 80042d8:	4632      	mov	r2, r6
 80042da:	4621      	mov	r1, r4
 80042dc:	4640      	mov	r0, r8
 80042de:	f7ff ff70 	bl	80041c2 <__ssputs_r>
 80042e2:	3001      	adds	r0, #1
 80042e4:	f000 80a4 	beq.w	8004430 <_svfiprintf_r+0x1b8>
 80042e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ea:	4453      	add	r3, sl
 80042ec:	9309      	str	r3, [sp, #36]	; 0x24
 80042ee:	783b      	ldrb	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 809d 	beq.w	8004430 <_svfiprintf_r+0x1b8>
 80042f6:	2300      	movs	r3, #0
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004300:	9304      	str	r3, [sp, #16]
 8004302:	9307      	str	r3, [sp, #28]
 8004304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004308:	931a      	str	r3, [sp, #104]	; 0x68
 800430a:	462f      	mov	r7, r5
 800430c:	2205      	movs	r2, #5
 800430e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004312:	4850      	ldr	r0, [pc, #320]	; (8004454 <_svfiprintf_r+0x1dc>)
 8004314:	f7fb ff64 	bl	80001e0 <memchr>
 8004318:	9b04      	ldr	r3, [sp, #16]
 800431a:	b9d0      	cbnz	r0, 8004352 <_svfiprintf_r+0xda>
 800431c:	06d9      	lsls	r1, r3, #27
 800431e:	bf44      	itt	mi
 8004320:	2220      	movmi	r2, #32
 8004322:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004326:	071a      	lsls	r2, r3, #28
 8004328:	bf44      	itt	mi
 800432a:	222b      	movmi	r2, #43	; 0x2b
 800432c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004330:	782a      	ldrb	r2, [r5, #0]
 8004332:	2a2a      	cmp	r2, #42	; 0x2a
 8004334:	d015      	beq.n	8004362 <_svfiprintf_r+0xea>
 8004336:	9a07      	ldr	r2, [sp, #28]
 8004338:	462f      	mov	r7, r5
 800433a:	2000      	movs	r0, #0
 800433c:	250a      	movs	r5, #10
 800433e:	4639      	mov	r1, r7
 8004340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004344:	3b30      	subs	r3, #48	; 0x30
 8004346:	2b09      	cmp	r3, #9
 8004348:	d94d      	bls.n	80043e6 <_svfiprintf_r+0x16e>
 800434a:	b1b8      	cbz	r0, 800437c <_svfiprintf_r+0x104>
 800434c:	e00f      	b.n	800436e <_svfiprintf_r+0xf6>
 800434e:	462f      	mov	r7, r5
 8004350:	e7b8      	b.n	80042c4 <_svfiprintf_r+0x4c>
 8004352:	4a40      	ldr	r2, [pc, #256]	; (8004454 <_svfiprintf_r+0x1dc>)
 8004354:	1a80      	subs	r0, r0, r2
 8004356:	fa0b f000 	lsl.w	r0, fp, r0
 800435a:	4318      	orrs	r0, r3
 800435c:	9004      	str	r0, [sp, #16]
 800435e:	463d      	mov	r5, r7
 8004360:	e7d3      	b.n	800430a <_svfiprintf_r+0x92>
 8004362:	9a03      	ldr	r2, [sp, #12]
 8004364:	1d11      	adds	r1, r2, #4
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	9103      	str	r1, [sp, #12]
 800436a:	2a00      	cmp	r2, #0
 800436c:	db01      	blt.n	8004372 <_svfiprintf_r+0xfa>
 800436e:	9207      	str	r2, [sp, #28]
 8004370:	e004      	b.n	800437c <_svfiprintf_r+0x104>
 8004372:	4252      	negs	r2, r2
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	9207      	str	r2, [sp, #28]
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	783b      	ldrb	r3, [r7, #0]
 800437e:	2b2e      	cmp	r3, #46	; 0x2e
 8004380:	d10c      	bne.n	800439c <_svfiprintf_r+0x124>
 8004382:	787b      	ldrb	r3, [r7, #1]
 8004384:	2b2a      	cmp	r3, #42	; 0x2a
 8004386:	d133      	bne.n	80043f0 <_svfiprintf_r+0x178>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	9203      	str	r2, [sp, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	bfb8      	it	lt
 8004394:	f04f 33ff 	movlt.w	r3, #4294967295
 8004398:	3702      	adds	r7, #2
 800439a:	9305      	str	r3, [sp, #20]
 800439c:	4d2e      	ldr	r5, [pc, #184]	; (8004458 <_svfiprintf_r+0x1e0>)
 800439e:	7839      	ldrb	r1, [r7, #0]
 80043a0:	2203      	movs	r2, #3
 80043a2:	4628      	mov	r0, r5
 80043a4:	f7fb ff1c 	bl	80001e0 <memchr>
 80043a8:	b138      	cbz	r0, 80043ba <_svfiprintf_r+0x142>
 80043aa:	2340      	movs	r3, #64	; 0x40
 80043ac:	1b40      	subs	r0, r0, r5
 80043ae:	fa03 f000 	lsl.w	r0, r3, r0
 80043b2:	9b04      	ldr	r3, [sp, #16]
 80043b4:	4303      	orrs	r3, r0
 80043b6:	3701      	adds	r7, #1
 80043b8:	9304      	str	r3, [sp, #16]
 80043ba:	7839      	ldrb	r1, [r7, #0]
 80043bc:	4827      	ldr	r0, [pc, #156]	; (800445c <_svfiprintf_r+0x1e4>)
 80043be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043c2:	2206      	movs	r2, #6
 80043c4:	1c7e      	adds	r6, r7, #1
 80043c6:	f7fb ff0b 	bl	80001e0 <memchr>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d038      	beq.n	8004440 <_svfiprintf_r+0x1c8>
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <_svfiprintf_r+0x1e8>)
 80043d0:	bb13      	cbnz	r3, 8004418 <_svfiprintf_r+0x1a0>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	3307      	adds	r3, #7
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	3308      	adds	r3, #8
 80043dc:	9303      	str	r3, [sp, #12]
 80043de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e0:	444b      	add	r3, r9
 80043e2:	9309      	str	r3, [sp, #36]	; 0x24
 80043e4:	e76d      	b.n	80042c2 <_svfiprintf_r+0x4a>
 80043e6:	fb05 3202 	mla	r2, r5, r2, r3
 80043ea:	2001      	movs	r0, #1
 80043ec:	460f      	mov	r7, r1
 80043ee:	e7a6      	b.n	800433e <_svfiprintf_r+0xc6>
 80043f0:	2300      	movs	r3, #0
 80043f2:	3701      	adds	r7, #1
 80043f4:	9305      	str	r3, [sp, #20]
 80043f6:	4619      	mov	r1, r3
 80043f8:	250a      	movs	r5, #10
 80043fa:	4638      	mov	r0, r7
 80043fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004400:	3a30      	subs	r2, #48	; 0x30
 8004402:	2a09      	cmp	r2, #9
 8004404:	d903      	bls.n	800440e <_svfiprintf_r+0x196>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0c8      	beq.n	800439c <_svfiprintf_r+0x124>
 800440a:	9105      	str	r1, [sp, #20]
 800440c:	e7c6      	b.n	800439c <_svfiprintf_r+0x124>
 800440e:	fb05 2101 	mla	r1, r5, r1, r2
 8004412:	2301      	movs	r3, #1
 8004414:	4607      	mov	r7, r0
 8004416:	e7f0      	b.n	80043fa <_svfiprintf_r+0x182>
 8004418:	ab03      	add	r3, sp, #12
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	4622      	mov	r2, r4
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <_svfiprintf_r+0x1ec>)
 8004420:	a904      	add	r1, sp, #16
 8004422:	4640      	mov	r0, r8
 8004424:	f3af 8000 	nop.w
 8004428:	f1b0 3fff 	cmp.w	r0, #4294967295
 800442c:	4681      	mov	r9, r0
 800442e:	d1d6      	bne.n	80043de <_svfiprintf_r+0x166>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	065b      	lsls	r3, r3, #25
 8004434:	f53f af35 	bmi.w	80042a2 <_svfiprintf_r+0x2a>
 8004438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800443a:	b01d      	add	sp, #116	; 0x74
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	ab03      	add	r3, sp, #12
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	4622      	mov	r2, r4
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <_svfiprintf_r+0x1ec>)
 8004448:	a904      	add	r1, sp, #16
 800444a:	4640      	mov	r0, r8
 800444c:	f000 f882 	bl	8004554 <_printf_i>
 8004450:	e7ea      	b.n	8004428 <_svfiprintf_r+0x1b0>
 8004452:	bf00      	nop
 8004454:	0800549f 	.word	0x0800549f
 8004458:	080054a5 	.word	0x080054a5
 800445c:	080054a9 	.word	0x080054a9
 8004460:	00000000 	.word	0x00000000
 8004464:	080041c3 	.word	0x080041c3

08004468 <_printf_common>:
 8004468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800446c:	4691      	mov	r9, r2
 800446e:	461f      	mov	r7, r3
 8004470:	688a      	ldr	r2, [r1, #8]
 8004472:	690b      	ldr	r3, [r1, #16]
 8004474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004478:	4293      	cmp	r3, r2
 800447a:	bfb8      	it	lt
 800447c:	4613      	movlt	r3, r2
 800447e:	f8c9 3000 	str.w	r3, [r9]
 8004482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004486:	4606      	mov	r6, r0
 8004488:	460c      	mov	r4, r1
 800448a:	b112      	cbz	r2, 8004492 <_printf_common+0x2a>
 800448c:	3301      	adds	r3, #1
 800448e:	f8c9 3000 	str.w	r3, [r9]
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	0699      	lsls	r1, r3, #26
 8004496:	bf42      	ittt	mi
 8004498:	f8d9 3000 	ldrmi.w	r3, [r9]
 800449c:	3302      	addmi	r3, #2
 800449e:	f8c9 3000 	strmi.w	r3, [r9]
 80044a2:	6825      	ldr	r5, [r4, #0]
 80044a4:	f015 0506 	ands.w	r5, r5, #6
 80044a8:	d107      	bne.n	80044ba <_printf_common+0x52>
 80044aa:	f104 0a19 	add.w	sl, r4, #25
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	f8d9 2000 	ldr.w	r2, [r9]
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	42ab      	cmp	r3, r5
 80044b8:	dc28      	bgt.n	800450c <_printf_common+0xa4>
 80044ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	3300      	adds	r3, #0
 80044c2:	bf18      	it	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	0692      	lsls	r2, r2, #26
 80044c8:	d42d      	bmi.n	8004526 <_printf_common+0xbe>
 80044ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ce:	4639      	mov	r1, r7
 80044d0:	4630      	mov	r0, r6
 80044d2:	47c0      	blx	r8
 80044d4:	3001      	adds	r0, #1
 80044d6:	d020      	beq.n	800451a <_printf_common+0xb2>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	68e5      	ldr	r5, [r4, #12]
 80044dc:	f8d9 2000 	ldr.w	r2, [r9]
 80044e0:	f003 0306 	and.w	r3, r3, #6
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	bf08      	it	eq
 80044e8:	1aad      	subeq	r5, r5, r2
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	6922      	ldr	r2, [r4, #16]
 80044ee:	bf0c      	ite	eq
 80044f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f4:	2500      	movne	r5, #0
 80044f6:	4293      	cmp	r3, r2
 80044f8:	bfc4      	itt	gt
 80044fa:	1a9b      	subgt	r3, r3, r2
 80044fc:	18ed      	addgt	r5, r5, r3
 80044fe:	f04f 0900 	mov.w	r9, #0
 8004502:	341a      	adds	r4, #26
 8004504:	454d      	cmp	r5, r9
 8004506:	d11a      	bne.n	800453e <_printf_common+0xd6>
 8004508:	2000      	movs	r0, #0
 800450a:	e008      	b.n	800451e <_printf_common+0xb6>
 800450c:	2301      	movs	r3, #1
 800450e:	4652      	mov	r2, sl
 8004510:	4639      	mov	r1, r7
 8004512:	4630      	mov	r0, r6
 8004514:	47c0      	blx	r8
 8004516:	3001      	adds	r0, #1
 8004518:	d103      	bne.n	8004522 <_printf_common+0xba>
 800451a:	f04f 30ff 	mov.w	r0, #4294967295
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	3501      	adds	r5, #1
 8004524:	e7c3      	b.n	80044ae <_printf_common+0x46>
 8004526:	18e1      	adds	r1, r4, r3
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	2030      	movs	r0, #48	; 0x30
 800452c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004530:	4422      	add	r2, r4
 8004532:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004536:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800453a:	3302      	adds	r3, #2
 800453c:	e7c5      	b.n	80044ca <_printf_common+0x62>
 800453e:	2301      	movs	r3, #1
 8004540:	4622      	mov	r2, r4
 8004542:	4639      	mov	r1, r7
 8004544:	4630      	mov	r0, r6
 8004546:	47c0      	blx	r8
 8004548:	3001      	adds	r0, #1
 800454a:	d0e6      	beq.n	800451a <_printf_common+0xb2>
 800454c:	f109 0901 	add.w	r9, r9, #1
 8004550:	e7d8      	b.n	8004504 <_printf_common+0x9c>
	...

08004554 <_printf_i>:
 8004554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004558:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800455c:	460c      	mov	r4, r1
 800455e:	7e09      	ldrb	r1, [r1, #24]
 8004560:	b085      	sub	sp, #20
 8004562:	296e      	cmp	r1, #110	; 0x6e
 8004564:	4617      	mov	r7, r2
 8004566:	4606      	mov	r6, r0
 8004568:	4698      	mov	r8, r3
 800456a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800456c:	f000 80b3 	beq.w	80046d6 <_printf_i+0x182>
 8004570:	d822      	bhi.n	80045b8 <_printf_i+0x64>
 8004572:	2963      	cmp	r1, #99	; 0x63
 8004574:	d036      	beq.n	80045e4 <_printf_i+0x90>
 8004576:	d80a      	bhi.n	800458e <_printf_i+0x3a>
 8004578:	2900      	cmp	r1, #0
 800457a:	f000 80b9 	beq.w	80046f0 <_printf_i+0x19c>
 800457e:	2958      	cmp	r1, #88	; 0x58
 8004580:	f000 8083 	beq.w	800468a <_printf_i+0x136>
 8004584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004588:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800458c:	e032      	b.n	80045f4 <_printf_i+0xa0>
 800458e:	2964      	cmp	r1, #100	; 0x64
 8004590:	d001      	beq.n	8004596 <_printf_i+0x42>
 8004592:	2969      	cmp	r1, #105	; 0x69
 8004594:	d1f6      	bne.n	8004584 <_printf_i+0x30>
 8004596:	6820      	ldr	r0, [r4, #0]
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	0605      	lsls	r5, r0, #24
 800459c:	f103 0104 	add.w	r1, r3, #4
 80045a0:	d52a      	bpl.n	80045f8 <_printf_i+0xa4>
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6011      	str	r1, [r2, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da03      	bge.n	80045b2 <_printf_i+0x5e>
 80045aa:	222d      	movs	r2, #45	; 0x2d
 80045ac:	425b      	negs	r3, r3
 80045ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045b2:	486f      	ldr	r0, [pc, #444]	; (8004770 <_printf_i+0x21c>)
 80045b4:	220a      	movs	r2, #10
 80045b6:	e039      	b.n	800462c <_printf_i+0xd8>
 80045b8:	2973      	cmp	r1, #115	; 0x73
 80045ba:	f000 809d 	beq.w	80046f8 <_printf_i+0x1a4>
 80045be:	d808      	bhi.n	80045d2 <_printf_i+0x7e>
 80045c0:	296f      	cmp	r1, #111	; 0x6f
 80045c2:	d020      	beq.n	8004606 <_printf_i+0xb2>
 80045c4:	2970      	cmp	r1, #112	; 0x70
 80045c6:	d1dd      	bne.n	8004584 <_printf_i+0x30>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	f043 0320 	orr.w	r3, r3, #32
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	e003      	b.n	80045da <_printf_i+0x86>
 80045d2:	2975      	cmp	r1, #117	; 0x75
 80045d4:	d017      	beq.n	8004606 <_printf_i+0xb2>
 80045d6:	2978      	cmp	r1, #120	; 0x78
 80045d8:	d1d4      	bne.n	8004584 <_printf_i+0x30>
 80045da:	2378      	movs	r3, #120	; 0x78
 80045dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045e0:	4864      	ldr	r0, [pc, #400]	; (8004774 <_printf_i+0x220>)
 80045e2:	e055      	b.n	8004690 <_printf_i+0x13c>
 80045e4:	6813      	ldr	r3, [r2, #0]
 80045e6:	1d19      	adds	r1, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6011      	str	r1, [r2, #0]
 80045ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f4:	2301      	movs	r3, #1
 80045f6:	e08c      	b.n	8004712 <_printf_i+0x1be>
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6011      	str	r1, [r2, #0]
 80045fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004600:	bf18      	it	ne
 8004602:	b21b      	sxthne	r3, r3
 8004604:	e7cf      	b.n	80045a6 <_printf_i+0x52>
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	6825      	ldr	r5, [r4, #0]
 800460a:	1d18      	adds	r0, r3, #4
 800460c:	6010      	str	r0, [r2, #0]
 800460e:	0628      	lsls	r0, r5, #24
 8004610:	d501      	bpl.n	8004616 <_printf_i+0xc2>
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	e002      	b.n	800461c <_printf_i+0xc8>
 8004616:	0668      	lsls	r0, r5, #25
 8004618:	d5fb      	bpl.n	8004612 <_printf_i+0xbe>
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	4854      	ldr	r0, [pc, #336]	; (8004770 <_printf_i+0x21c>)
 800461e:	296f      	cmp	r1, #111	; 0x6f
 8004620:	bf14      	ite	ne
 8004622:	220a      	movne	r2, #10
 8004624:	2208      	moveq	r2, #8
 8004626:	2100      	movs	r1, #0
 8004628:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800462c:	6865      	ldr	r5, [r4, #4]
 800462e:	60a5      	str	r5, [r4, #8]
 8004630:	2d00      	cmp	r5, #0
 8004632:	f2c0 8095 	blt.w	8004760 <_printf_i+0x20c>
 8004636:	6821      	ldr	r1, [r4, #0]
 8004638:	f021 0104 	bic.w	r1, r1, #4
 800463c:	6021      	str	r1, [r4, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <_printf_i+0x16a>
 8004642:	2d00      	cmp	r5, #0
 8004644:	f040 808e 	bne.w	8004764 <_printf_i+0x210>
 8004648:	4665      	mov	r5, ip
 800464a:	2a08      	cmp	r2, #8
 800464c:	d10b      	bne.n	8004666 <_printf_i+0x112>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	07db      	lsls	r3, r3, #31
 8004652:	d508      	bpl.n	8004666 <_printf_i+0x112>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	6862      	ldr	r2, [r4, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	bfde      	ittt	le
 800465c:	2330      	movle	r3, #48	; 0x30
 800465e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004662:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004666:	ebac 0305 	sub.w	r3, ip, r5
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	f8cd 8000 	str.w	r8, [sp]
 8004670:	463b      	mov	r3, r7
 8004672:	aa03      	add	r2, sp, #12
 8004674:	4621      	mov	r1, r4
 8004676:	4630      	mov	r0, r6
 8004678:	f7ff fef6 	bl	8004468 <_printf_common>
 800467c:	3001      	adds	r0, #1
 800467e:	d14d      	bne.n	800471c <_printf_i+0x1c8>
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	b005      	add	sp, #20
 8004686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800468a:	4839      	ldr	r0, [pc, #228]	; (8004770 <_printf_i+0x21c>)
 800468c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	6821      	ldr	r1, [r4, #0]
 8004694:	1d1d      	adds	r5, r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6015      	str	r5, [r2, #0]
 800469a:	060a      	lsls	r2, r1, #24
 800469c:	d50b      	bpl.n	80046b6 <_printf_i+0x162>
 800469e:	07ca      	lsls	r2, r1, #31
 80046a0:	bf44      	itt	mi
 80046a2:	f041 0120 	orrmi.w	r1, r1, #32
 80046a6:	6021      	strmi	r1, [r4, #0]
 80046a8:	b91b      	cbnz	r3, 80046b2 <_printf_i+0x15e>
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	f022 0220 	bic.w	r2, r2, #32
 80046b0:	6022      	str	r2, [r4, #0]
 80046b2:	2210      	movs	r2, #16
 80046b4:	e7b7      	b.n	8004626 <_printf_i+0xd2>
 80046b6:	064d      	lsls	r5, r1, #25
 80046b8:	bf48      	it	mi
 80046ba:	b29b      	uxthmi	r3, r3
 80046bc:	e7ef      	b.n	800469e <_printf_i+0x14a>
 80046be:	4665      	mov	r5, ip
 80046c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80046c4:	fb02 3311 	mls	r3, r2, r1, r3
 80046c8:	5cc3      	ldrb	r3, [r0, r3]
 80046ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046ce:	460b      	mov	r3, r1
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d1f5      	bne.n	80046c0 <_printf_i+0x16c>
 80046d4:	e7b9      	b.n	800464a <_printf_i+0xf6>
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	6825      	ldr	r5, [r4, #0]
 80046da:	6961      	ldr	r1, [r4, #20]
 80046dc:	1d18      	adds	r0, r3, #4
 80046de:	6010      	str	r0, [r2, #0]
 80046e0:	0628      	lsls	r0, r5, #24
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	d501      	bpl.n	80046ea <_printf_i+0x196>
 80046e6:	6019      	str	r1, [r3, #0]
 80046e8:	e002      	b.n	80046f0 <_printf_i+0x19c>
 80046ea:	066a      	lsls	r2, r5, #25
 80046ec:	d5fb      	bpl.n	80046e6 <_printf_i+0x192>
 80046ee:	8019      	strh	r1, [r3, #0]
 80046f0:	2300      	movs	r3, #0
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	4665      	mov	r5, ip
 80046f6:	e7b9      	b.n	800466c <_printf_i+0x118>
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	1d19      	adds	r1, r3, #4
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	681d      	ldr	r5, [r3, #0]
 8004700:	6862      	ldr	r2, [r4, #4]
 8004702:	2100      	movs	r1, #0
 8004704:	4628      	mov	r0, r5
 8004706:	f7fb fd6b 	bl	80001e0 <memchr>
 800470a:	b108      	cbz	r0, 8004710 <_printf_i+0x1bc>
 800470c:	1b40      	subs	r0, r0, r5
 800470e:	6060      	str	r0, [r4, #4]
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	6123      	str	r3, [r4, #16]
 8004714:	2300      	movs	r3, #0
 8004716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471a:	e7a7      	b.n	800466c <_printf_i+0x118>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	462a      	mov	r2, r5
 8004720:	4639      	mov	r1, r7
 8004722:	4630      	mov	r0, r6
 8004724:	47c0      	blx	r8
 8004726:	3001      	adds	r0, #1
 8004728:	d0aa      	beq.n	8004680 <_printf_i+0x12c>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	079b      	lsls	r3, r3, #30
 800472e:	d413      	bmi.n	8004758 <_printf_i+0x204>
 8004730:	68e0      	ldr	r0, [r4, #12]
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	4298      	cmp	r0, r3
 8004736:	bfb8      	it	lt
 8004738:	4618      	movlt	r0, r3
 800473a:	e7a3      	b.n	8004684 <_printf_i+0x130>
 800473c:	2301      	movs	r3, #1
 800473e:	464a      	mov	r2, r9
 8004740:	4639      	mov	r1, r7
 8004742:	4630      	mov	r0, r6
 8004744:	47c0      	blx	r8
 8004746:	3001      	adds	r0, #1
 8004748:	d09a      	beq.n	8004680 <_printf_i+0x12c>
 800474a:	3501      	adds	r5, #1
 800474c:	68e3      	ldr	r3, [r4, #12]
 800474e:	9a03      	ldr	r2, [sp, #12]
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	42ab      	cmp	r3, r5
 8004754:	dcf2      	bgt.n	800473c <_printf_i+0x1e8>
 8004756:	e7eb      	b.n	8004730 <_printf_i+0x1dc>
 8004758:	2500      	movs	r5, #0
 800475a:	f104 0919 	add.w	r9, r4, #25
 800475e:	e7f5      	b.n	800474c <_printf_i+0x1f8>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ac      	bne.n	80046be <_printf_i+0x16a>
 8004764:	7803      	ldrb	r3, [r0, #0]
 8004766:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800476a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800476e:	e76c      	b.n	800464a <_printf_i+0xf6>
 8004770:	080054b0 	.word	0x080054b0
 8004774:	080054c1 	.word	0x080054c1

08004778 <memmove>:
 8004778:	4288      	cmp	r0, r1
 800477a:	b510      	push	{r4, lr}
 800477c:	eb01 0302 	add.w	r3, r1, r2
 8004780:	d807      	bhi.n	8004792 <memmove+0x1a>
 8004782:	1e42      	subs	r2, r0, #1
 8004784:	4299      	cmp	r1, r3
 8004786:	d00a      	beq.n	800479e <memmove+0x26>
 8004788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800478c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004790:	e7f8      	b.n	8004784 <memmove+0xc>
 8004792:	4283      	cmp	r3, r0
 8004794:	d9f5      	bls.n	8004782 <memmove+0xa>
 8004796:	1881      	adds	r1, r0, r2
 8004798:	1ad2      	subs	r2, r2, r3
 800479a:	42d3      	cmn	r3, r2
 800479c:	d100      	bne.n	80047a0 <memmove+0x28>
 800479e:	bd10      	pop	{r4, pc}
 80047a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80047a8:	e7f7      	b.n	800479a <memmove+0x22>
	...

080047ac <_free_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4605      	mov	r5, r0
 80047b0:	2900      	cmp	r1, #0
 80047b2:	d045      	beq.n	8004840 <_free_r+0x94>
 80047b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b8:	1f0c      	subs	r4, r1, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfb8      	it	lt
 80047be:	18e4      	addlt	r4, r4, r3
 80047c0:	f000 f8d2 	bl	8004968 <__malloc_lock>
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <_free_r+0x98>)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	4610      	mov	r0, r2
 80047ca:	b933      	cbnz	r3, 80047da <_free_r+0x2e>
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	6014      	str	r4, [r2, #0]
 80047d0:	4628      	mov	r0, r5
 80047d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d6:	f000 b8c8 	b.w	800496a <__malloc_unlock>
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d90c      	bls.n	80047f8 <_free_r+0x4c>
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	1862      	adds	r2, r4, r1
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bf04      	itt	eq
 80047e6:	681a      	ldreq	r2, [r3, #0]
 80047e8:	685b      	ldreq	r3, [r3, #4]
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	bf04      	itt	eq
 80047ee:	1852      	addeq	r2, r2, r1
 80047f0:	6022      	streq	r2, [r4, #0]
 80047f2:	6004      	str	r4, [r0, #0]
 80047f4:	e7ec      	b.n	80047d0 <_free_r+0x24>
 80047f6:	4613      	mov	r3, r2
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	b10a      	cbz	r2, 8004800 <_free_r+0x54>
 80047fc:	42a2      	cmp	r2, r4
 80047fe:	d9fa      	bls.n	80047f6 <_free_r+0x4a>
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	1858      	adds	r0, r3, r1
 8004804:	42a0      	cmp	r0, r4
 8004806:	d10b      	bne.n	8004820 <_free_r+0x74>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	4401      	add	r1, r0
 800480c:	1858      	adds	r0, r3, r1
 800480e:	4282      	cmp	r2, r0
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	d1dd      	bne.n	80047d0 <_free_r+0x24>
 8004814:	6810      	ldr	r0, [r2, #0]
 8004816:	6852      	ldr	r2, [r2, #4]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	4401      	add	r1, r0
 800481c:	6019      	str	r1, [r3, #0]
 800481e:	e7d7      	b.n	80047d0 <_free_r+0x24>
 8004820:	d902      	bls.n	8004828 <_free_r+0x7c>
 8004822:	230c      	movs	r3, #12
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	e7d3      	b.n	80047d0 <_free_r+0x24>
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	1821      	adds	r1, r4, r0
 800482c:	428a      	cmp	r2, r1
 800482e:	bf04      	itt	eq
 8004830:	6811      	ldreq	r1, [r2, #0]
 8004832:	6852      	ldreq	r2, [r2, #4]
 8004834:	6062      	str	r2, [r4, #4]
 8004836:	bf04      	itt	eq
 8004838:	1809      	addeq	r1, r1, r0
 800483a:	6021      	streq	r1, [r4, #0]
 800483c:	605c      	str	r4, [r3, #4]
 800483e:	e7c7      	b.n	80047d0 <_free_r+0x24>
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	20001178 	.word	0x20001178

08004848 <_malloc_r>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	1ccd      	adds	r5, r1, #3
 800484c:	f025 0503 	bic.w	r5, r5, #3
 8004850:	3508      	adds	r5, #8
 8004852:	2d0c      	cmp	r5, #12
 8004854:	bf38      	it	cc
 8004856:	250c      	movcc	r5, #12
 8004858:	2d00      	cmp	r5, #0
 800485a:	4606      	mov	r6, r0
 800485c:	db01      	blt.n	8004862 <_malloc_r+0x1a>
 800485e:	42a9      	cmp	r1, r5
 8004860:	d903      	bls.n	800486a <_malloc_r+0x22>
 8004862:	230c      	movs	r3, #12
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	f000 f87d 	bl	8004968 <__malloc_lock>
 800486e:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <_malloc_r+0xac>)
 8004870:	6814      	ldr	r4, [r2, #0]
 8004872:	4621      	mov	r1, r4
 8004874:	b991      	cbnz	r1, 800489c <_malloc_r+0x54>
 8004876:	4c20      	ldr	r4, [pc, #128]	; (80048f8 <_malloc_r+0xb0>)
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	b91b      	cbnz	r3, 8004884 <_malloc_r+0x3c>
 800487c:	4630      	mov	r0, r6
 800487e:	f000 f863 	bl	8004948 <_sbrk_r>
 8004882:	6020      	str	r0, [r4, #0]
 8004884:	4629      	mov	r1, r5
 8004886:	4630      	mov	r0, r6
 8004888:	f000 f85e 	bl	8004948 <_sbrk_r>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d124      	bne.n	80048da <_malloc_r+0x92>
 8004890:	230c      	movs	r3, #12
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f868 	bl	800496a <__malloc_unlock>
 800489a:	e7e4      	b.n	8004866 <_malloc_r+0x1e>
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	1b5b      	subs	r3, r3, r5
 80048a0:	d418      	bmi.n	80048d4 <_malloc_r+0x8c>
 80048a2:	2b0b      	cmp	r3, #11
 80048a4:	d90f      	bls.n	80048c6 <_malloc_r+0x7e>
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	50cd      	str	r5, [r1, r3]
 80048aa:	18cc      	adds	r4, r1, r3
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f85c 	bl	800496a <__malloc_unlock>
 80048b2:	f104 000b 	add.w	r0, r4, #11
 80048b6:	1d23      	adds	r3, r4, #4
 80048b8:	f020 0007 	bic.w	r0, r0, #7
 80048bc:	1ac3      	subs	r3, r0, r3
 80048be:	d0d3      	beq.n	8004868 <_malloc_r+0x20>
 80048c0:	425a      	negs	r2, r3
 80048c2:	50e2      	str	r2, [r4, r3]
 80048c4:	e7d0      	b.n	8004868 <_malloc_r+0x20>
 80048c6:	428c      	cmp	r4, r1
 80048c8:	684b      	ldr	r3, [r1, #4]
 80048ca:	bf16      	itet	ne
 80048cc:	6063      	strne	r3, [r4, #4]
 80048ce:	6013      	streq	r3, [r2, #0]
 80048d0:	460c      	movne	r4, r1
 80048d2:	e7eb      	b.n	80048ac <_malloc_r+0x64>
 80048d4:	460c      	mov	r4, r1
 80048d6:	6849      	ldr	r1, [r1, #4]
 80048d8:	e7cc      	b.n	8004874 <_malloc_r+0x2c>
 80048da:	1cc4      	adds	r4, r0, #3
 80048dc:	f024 0403 	bic.w	r4, r4, #3
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d005      	beq.n	80048f0 <_malloc_r+0xa8>
 80048e4:	1a21      	subs	r1, r4, r0
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 f82e 	bl	8004948 <_sbrk_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d0cf      	beq.n	8004890 <_malloc_r+0x48>
 80048f0:	6025      	str	r5, [r4, #0]
 80048f2:	e7db      	b.n	80048ac <_malloc_r+0x64>
 80048f4:	20001178 	.word	0x20001178
 80048f8:	2000117c 	.word	0x2000117c

080048fc <_realloc_r>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	4607      	mov	r7, r0
 8004900:	4614      	mov	r4, r2
 8004902:	460e      	mov	r6, r1
 8004904:	b921      	cbnz	r1, 8004910 <_realloc_r+0x14>
 8004906:	4611      	mov	r1, r2
 8004908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800490c:	f7ff bf9c 	b.w	8004848 <_malloc_r>
 8004910:	b922      	cbnz	r2, 800491c <_realloc_r+0x20>
 8004912:	f7ff ff4b 	bl	80047ac <_free_r>
 8004916:	4625      	mov	r5, r4
 8004918:	4628      	mov	r0, r5
 800491a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491c:	f000 f826 	bl	800496c <_malloc_usable_size_r>
 8004920:	42a0      	cmp	r0, r4
 8004922:	d20f      	bcs.n	8004944 <_realloc_r+0x48>
 8004924:	4621      	mov	r1, r4
 8004926:	4638      	mov	r0, r7
 8004928:	f7ff ff8e 	bl	8004848 <_malloc_r>
 800492c:	4605      	mov	r5, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	d0f2      	beq.n	8004918 <_realloc_r+0x1c>
 8004932:	4631      	mov	r1, r6
 8004934:	4622      	mov	r2, r4
 8004936:	f7ff fc03 	bl	8004140 <memcpy>
 800493a:	4631      	mov	r1, r6
 800493c:	4638      	mov	r0, r7
 800493e:	f7ff ff35 	bl	80047ac <_free_r>
 8004942:	e7e9      	b.n	8004918 <_realloc_r+0x1c>
 8004944:	4635      	mov	r5, r6
 8004946:	e7e7      	b.n	8004918 <_realloc_r+0x1c>

08004948 <_sbrk_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4c06      	ldr	r4, [pc, #24]	; (8004964 <_sbrk_r+0x1c>)
 800494c:	2300      	movs	r3, #0
 800494e:	4605      	mov	r5, r0
 8004950:	4608      	mov	r0, r1
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	f7fd f912 	bl	8001b7c <_sbrk>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_sbrk_r+0x1a>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	b103      	cbz	r3, 8004962 <_sbrk_r+0x1a>
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20001240 	.word	0x20001240

08004968 <__malloc_lock>:
 8004968:	4770      	bx	lr

0800496a <__malloc_unlock>:
 800496a:	4770      	bx	lr

0800496c <_malloc_usable_size_r>:
 800496c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004970:	1f18      	subs	r0, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfbc      	itt	lt
 8004976:	580b      	ldrlt	r3, [r1, r0]
 8004978:	18c0      	addlt	r0, r0, r3
 800497a:	4770      	bx	lr

0800497c <_init>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

08004988 <_fini>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr
